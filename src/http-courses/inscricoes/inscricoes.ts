/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
    DeleteApiV1CoursesCourseIdEnrollmentsEnrollmentId200,
    GetApiV1CoursesCourseIdEnrollments200,
    GetApiV1CoursesCourseIdEnrollmentsParams,
    ModelsEnrollmentStatusUpdateRequest,
    ModelsEnrollmentStatusUpdateResponse,
    ModelsErrorResponse,
    ModelsInscricao,
    PutApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatus200,
    PutApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusBody
} from '.././models';

import { customFetch } from '../../../custom-fetch-course';

/**
 * Retorna lista paginada de inscrições de um curso específico
 * @summary Listar inscrições de um curso
 */
export type getApiV1CoursesCourseIdEnrollmentsResponse200 = {
  data: GetApiV1CoursesCourseIdEnrollments200
  status: 200
}

export type getApiV1CoursesCourseIdEnrollmentsResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type getApiV1CoursesCourseIdEnrollmentsResponseComposite = getApiV1CoursesCourseIdEnrollmentsResponse200 | getApiV1CoursesCourseIdEnrollmentsResponse400;
    
export type getApiV1CoursesCourseIdEnrollmentsResponse = getApiV1CoursesCourseIdEnrollmentsResponseComposite & {
  headers: Headers;
}

export const getGetApiV1CoursesCourseIdEnrollmentsUrl = (courseId: number,
    params?: GetApiV1CoursesCourseIdEnrollmentsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/courses/${courseId}/enrollments?${stringifiedParams}` : `/api/v1/courses/${courseId}/enrollments`
}

export const getApiV1CoursesCourseIdEnrollments = async (courseId: number,
    params?: GetApiV1CoursesCourseIdEnrollmentsParams, options?: RequestInit): Promise<getApiV1CoursesCourseIdEnrollmentsResponse> => {
  
  return customFetch<getApiV1CoursesCourseIdEnrollmentsResponse>(getGetApiV1CoursesCourseIdEnrollmentsUrl(courseId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Cria uma nova inscrição em um curso
 * @summary Criar inscrição
 */
export type postApiV1CoursesCourseIdEnrollmentsResponse201 = {
  data: ModelsInscricao
  status: 201
}

export type postApiV1CoursesCourseIdEnrollmentsResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type postApiV1CoursesCourseIdEnrollmentsResponseComposite = postApiV1CoursesCourseIdEnrollmentsResponse201 | postApiV1CoursesCourseIdEnrollmentsResponse400;
    
export type postApiV1CoursesCourseIdEnrollmentsResponse = postApiV1CoursesCourseIdEnrollmentsResponseComposite & {
  headers: Headers;
}

export const getPostApiV1CoursesCourseIdEnrollmentsUrl = (courseId: number,) => {


  

  return `/api/v1/courses/${courseId}/enrollments`
}

export const postApiV1CoursesCourseIdEnrollments = async (courseId: number,
    modelsInscricao: ModelsInscricao, options?: RequestInit): Promise<postApiV1CoursesCourseIdEnrollmentsResponse> => {
  
  return customFetch<postApiV1CoursesCourseIdEnrollmentsResponse>(getPostApiV1CoursesCourseIdEnrollmentsUrl(courseId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsInscricao,)
  }
);}


/**
 * Atualiza o status de várias inscrições de uma vez (aprovação em lote)
 * @summary Atualizar status de múltiplas inscrições
 */
export type putApiV1CoursesCourseIdEnrollmentsStatusResponse200 = {
  data: ModelsEnrollmentStatusUpdateResponse
  status: 200
}

export type putApiV1CoursesCourseIdEnrollmentsStatusResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type putApiV1CoursesCourseIdEnrollmentsStatusResponseComposite = putApiV1CoursesCourseIdEnrollmentsStatusResponse200 | putApiV1CoursesCourseIdEnrollmentsStatusResponse400;
    
export type putApiV1CoursesCourseIdEnrollmentsStatusResponse = putApiV1CoursesCourseIdEnrollmentsStatusResponseComposite & {
  headers: Headers;
}

export const getPutApiV1CoursesCourseIdEnrollmentsStatusUrl = (courseId: number,) => {


  

  return `/api/v1/courses/${courseId}/enrollments/status`
}

export const putApiV1CoursesCourseIdEnrollmentsStatus = async (courseId: number,
    modelsEnrollmentStatusUpdateRequest: ModelsEnrollmentStatusUpdateRequest, options?: RequestInit): Promise<putApiV1CoursesCourseIdEnrollmentsStatusResponse> => {
  
  return customFetch<putApiV1CoursesCourseIdEnrollmentsStatusResponse>(getPutApiV1CoursesCourseIdEnrollmentsStatusUrl(courseId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsEnrollmentStatusUpdateRequest,)
  }
);}


/**
 * Retorna dados completos de uma inscrição específica
 * @summary Obter inscrição por ID
 */
export type getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse200 = {
  data: ModelsInscricao
  status: 200
}

export type getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponseComposite = getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse200 | getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse400;
    
export type getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse = getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponseComposite & {
  headers: Headers;
}

export const getGetApiV1CoursesCourseIdEnrollmentsEnrollmentIdUrl = (courseId: number,
    enrollmentId: string,) => {


  

  return `/api/v1/courses/${courseId}/enrollments/${enrollmentId}`
}

export const getApiV1CoursesCourseIdEnrollmentsEnrollmentId = async (courseId: number,
    enrollmentId: string, options?: RequestInit): Promise<getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse> => {
  
  return customFetch<getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse>(getGetApiV1CoursesCourseIdEnrollmentsEnrollmentIdUrl(courseId,enrollmentId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Remove uma inscrição específica
 * @summary Excluir inscrição
 */
export type deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse200 = {
  data: DeleteApiV1CoursesCourseIdEnrollmentsEnrollmentId200
  status: 200
}

export type deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponseComposite = deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse200 | deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse400;
    
export type deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse = deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponseComposite & {
  headers: Headers;
}

export const getDeleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdUrl = (courseId: number,
    enrollmentId: string,) => {


  

  return `/api/v1/courses/${courseId}/enrollments/${enrollmentId}`
}

export const deleteApiV1CoursesCourseIdEnrollmentsEnrollmentId = async (courseId: number,
    enrollmentId: string, options?: RequestInit): Promise<deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse> => {
  
  return customFetch<deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse>(getDeleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdUrl(courseId,enrollmentId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


/**
 * Atualiza o status de uma inscrição específica
 * @summary Atualizar status de inscrição individual
 */
export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse200 = {
  data: PutApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatus200
  status: 200
}

export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponseComposite = putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse200 | putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse400;
    
export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse = putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponseComposite & {
  headers: Headers;
}

export const getPutApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusUrl = (courseId: number,
    enrollmentId: string,) => {


  

  return `/api/v1/courses/${courseId}/enrollments/${enrollmentId}/status`
}

export const putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatus = async (courseId: number,
    enrollmentId: string,
    putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusBody: PutApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusBody, options?: RequestInit): Promise<putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse> => {
  
  return customFetch<putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse>(getPutApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusUrl(courseId,enrollmentId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusBody,)
  }
);}


