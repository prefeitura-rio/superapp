/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
    DeleteApiV1OrgaosId200,
    GetApiV1Orgaos200,
    GetApiV1OrgaosParams,
    ModelsErrorResponse,
    ModelsOrgao,
    ModelsOrgaoBody
} from '.././models';

import { customFetch } from '../../../custom-fetch-course';

/**
 * Retorna uma lista paginada de órgãos
 * @summary Listar órgãos
 */
export type getApiV1OrgaosResponse200 = {
  data: GetApiV1Orgaos200
  status: 200
}

export type getApiV1OrgaosResponse500 = {
  data: ModelsErrorResponse
  status: 500
}
    
export type getApiV1OrgaosResponseComposite = getApiV1OrgaosResponse200 | getApiV1OrgaosResponse500;
    
export type getApiV1OrgaosResponse = getApiV1OrgaosResponseComposite & {
  headers: Headers;
}

export const getGetApiV1OrgaosUrl = (params?: GetApiV1OrgaosParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/orgaos?${stringifiedParams}` : `/api/v1/orgaos`
}

export const getApiV1Orgaos = async (params?: GetApiV1OrgaosParams, options?: RequestInit): Promise<getApiV1OrgaosResponse> => {
  
  return customFetch<getApiV1OrgaosResponse>(getGetApiV1OrgaosUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Cria um novo órgão
 * @summary Criar órgão
 */
export type postApiV1OrgaosResponse201 = {
  data: ModelsOrgao
  status: 201
}

export type postApiV1OrgaosResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type postApiV1OrgaosResponseComposite = postApiV1OrgaosResponse201 | postApiV1OrgaosResponse400;
    
export type postApiV1OrgaosResponse = postApiV1OrgaosResponseComposite & {
  headers: Headers;
}

export const getPostApiV1OrgaosUrl = () => {


  

  return `/api/v1/orgaos`
}

export const postApiV1Orgaos = async (modelsOrgaoBody: ModelsOrgaoBody, options?: RequestInit): Promise<postApiV1OrgaosResponse> => {
  
  return customFetch<postApiV1OrgaosResponse>(getPostApiV1OrgaosUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsOrgaoBody,)
  }
);}


/**
 * Retorna um órgão pelo seu ID
 * @summary Obter órgão por ID
 */
export type getApiV1OrgaosIdResponse200 = {
  data: ModelsOrgao
  status: 200
}

export type getApiV1OrgaosIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type getApiV1OrgaosIdResponseComposite = getApiV1OrgaosIdResponse200 | getApiV1OrgaosIdResponse400;
    
export type getApiV1OrgaosIdResponse = getApiV1OrgaosIdResponseComposite & {
  headers: Headers;
}

export const getGetApiV1OrgaosIdUrl = (id: number,) => {


  

  return `/api/v1/orgaos/${id}`
}

export const getApiV1OrgaosId = async (id: number, options?: RequestInit): Promise<getApiV1OrgaosIdResponse> => {
  
  return customFetch<getApiV1OrgaosIdResponse>(getGetApiV1OrgaosIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Atualiza os dados de um órgão existente
 * @summary Atualizar órgão
 */
export type putApiV1OrgaosIdResponse200 = {
  data: ModelsOrgao
  status: 200
}

export type putApiV1OrgaosIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type putApiV1OrgaosIdResponseComposite = putApiV1OrgaosIdResponse200 | putApiV1OrgaosIdResponse400;
    
export type putApiV1OrgaosIdResponse = putApiV1OrgaosIdResponseComposite & {
  headers: Headers;
}

export const getPutApiV1OrgaosIdUrl = (id: number,) => {


  

  return `/api/v1/orgaos/${id}`
}

export const putApiV1OrgaosId = async (id: number,
    modelsOrgaoBody: ModelsOrgaoBody, options?: RequestInit): Promise<putApiV1OrgaosIdResponse> => {
  
  return customFetch<putApiV1OrgaosIdResponse>(getPutApiV1OrgaosIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsOrgaoBody,)
  }
);}


/**
 * Remove um órgão pelo ID
 * @summary Excluir órgão
 */
export type deleteApiV1OrgaosIdResponse200 = {
  data: DeleteApiV1OrgaosId200
  status: 200
}

export type deleteApiV1OrgaosIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type deleteApiV1OrgaosIdResponseComposite = deleteApiV1OrgaosIdResponse200 | deleteApiV1OrgaosIdResponse400;
    
export type deleteApiV1OrgaosIdResponse = deleteApiV1OrgaosIdResponseComposite & {
  headers: Headers;
}

export const getDeleteApiV1OrgaosIdUrl = (id: number,) => {


  

  return `/api/v1/orgaos/${id}`
}

export const deleteApiV1OrgaosId = async (id: number, options?: RequestInit): Promise<deleteApiV1OrgaosIdResponse> => {
  
  return customFetch<deleteApiV1OrgaosIdResponse>(getDeleteApiV1OrgaosIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


