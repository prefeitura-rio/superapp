/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
    DeleteApiV1InstituicoesId200,
    GetApiV1Instituicoes200,
    GetApiV1InstituicoesParams,
    ModelsErrorResponse,
    ModelsInstituicaoEnsino,
    ModelsInstituicaoEnsinoBody
} from '.././models';

import { customFetch } from '../../../custom-fetch-course';

/**
 * Retorna uma lista paginada de instituições
 * @summary Listar instituições de ensino
 */
export type getApiV1InstituicoesResponse200 = {
  data: GetApiV1Instituicoes200
  status: 200
}

export type getApiV1InstituicoesResponse500 = {
  data: ModelsErrorResponse
  status: 500
}
    
export type getApiV1InstituicoesResponseComposite = getApiV1InstituicoesResponse200 | getApiV1InstituicoesResponse500;
    
export type getApiV1InstituicoesResponse = getApiV1InstituicoesResponseComposite & {
  headers: Headers;
}

export const getGetApiV1InstituicoesUrl = (params?: GetApiV1InstituicoesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/instituicoes?${stringifiedParams}` : `/api/v1/instituicoes`
}

export const getApiV1Instituicoes = async (params?: GetApiV1InstituicoesParams, options?: RequestInit): Promise<getApiV1InstituicoesResponse> => {
  
  return customFetch<getApiV1InstituicoesResponse>(getGetApiV1InstituicoesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Cria uma nova instituição de ensino
 * @summary Criar instituição de ensino
 */
export type postApiV1InstituicoesResponse201 = {
  data: ModelsInstituicaoEnsino
  status: 201
}

export type postApiV1InstituicoesResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type postApiV1InstituicoesResponseComposite = postApiV1InstituicoesResponse201 | postApiV1InstituicoesResponse400;
    
export type postApiV1InstituicoesResponse = postApiV1InstituicoesResponseComposite & {
  headers: Headers;
}

export const getPostApiV1InstituicoesUrl = () => {


  

  return `/api/v1/instituicoes`
}

export const postApiV1Instituicoes = async (modelsInstituicaoEnsinoBody: ModelsInstituicaoEnsinoBody, options?: RequestInit): Promise<postApiV1InstituicoesResponse> => {
  
  return customFetch<postApiV1InstituicoesResponse>(getPostApiV1InstituicoesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsInstituicaoEnsinoBody,)
  }
);}


/**
 * Retorna uma instituição pelo seu ID
 * @summary Obter instituição de ensino por ID
 */
export type getApiV1InstituicoesIdResponse200 = {
  data: ModelsInstituicaoEnsino
  status: 200
}

export type getApiV1InstituicoesIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type getApiV1InstituicoesIdResponseComposite = getApiV1InstituicoesIdResponse200 | getApiV1InstituicoesIdResponse400;
    
export type getApiV1InstituicoesIdResponse = getApiV1InstituicoesIdResponseComposite & {
  headers: Headers;
}

export const getGetApiV1InstituicoesIdUrl = (id: number,) => {


  

  return `/api/v1/instituicoes/${id}`
}

export const getApiV1InstituicoesId = async (id: number, options?: RequestInit): Promise<getApiV1InstituicoesIdResponse> => {
  
  return customFetch<getApiV1InstituicoesIdResponse>(getGetApiV1InstituicoesIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Atualiza os dados de uma instituição existente
 * @summary Atualizar instituição de ensino
 */
export type putApiV1InstituicoesIdResponse200 = {
  data: ModelsInstituicaoEnsino
  status: 200
}

export type putApiV1InstituicoesIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type putApiV1InstituicoesIdResponseComposite = putApiV1InstituicoesIdResponse200 | putApiV1InstituicoesIdResponse400;
    
export type putApiV1InstituicoesIdResponse = putApiV1InstituicoesIdResponseComposite & {
  headers: Headers;
}

export const getPutApiV1InstituicoesIdUrl = (id: number,) => {


  

  return `/api/v1/instituicoes/${id}`
}

export const putApiV1InstituicoesId = async (id: number,
    modelsInstituicaoEnsinoBody: ModelsInstituicaoEnsinoBody, options?: RequestInit): Promise<putApiV1InstituicoesIdResponse> => {
  
  return customFetch<putApiV1InstituicoesIdResponse>(getPutApiV1InstituicoesIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsInstituicaoEnsinoBody,)
  }
);}


/**
 * Remove uma instituição pelo ID
 * @summary Excluir instituição de ensino
 */
export type deleteApiV1InstituicoesIdResponse200 = {
  data: DeleteApiV1InstituicoesId200
  status: 200
}

export type deleteApiV1InstituicoesIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type deleteApiV1InstituicoesIdResponseComposite = deleteApiV1InstituicoesIdResponse200 | deleteApiV1InstituicoesIdResponse400;
    
export type deleteApiV1InstituicoesIdResponse = deleteApiV1InstituicoesIdResponseComposite & {
  headers: Headers;
}

export const getDeleteApiV1InstituicoesIdUrl = (id: number,) => {


  

  return `/api/v1/instituicoes/${id}`
}

export const deleteApiV1InstituicoesId = async (id: number, options?: RequestInit): Promise<deleteApiV1InstituicoesIdResponse> => {
  
  return customFetch<deleteApiV1InstituicoesIdResponse>(getDeleteApiV1InstituicoesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


