/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
    ModelsErrorResponse,
    ModelsMultiCollectionSearchParameters,
    ModelsMultiCollectionSearchResponse,
    ModelsSearchDocumentsResponse,
    ModelsSearchParameters
} from '.././models';

import { customFetch } from '../../../custom-fetch-course';

/**
 * Busca documentos em uma coleção
 * @summary Buscar documentos em uma coleção
 */
export type postApiV1TypesenseCollectionsCollectionDocumentsSearchResponse200 = {
  data: ModelsSearchDocumentsResponse
  status: 200
}

export type postApiV1TypesenseCollectionsCollectionDocumentsSearchResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type postApiV1TypesenseCollectionsCollectionDocumentsSearchResponseComposite = postApiV1TypesenseCollectionsCollectionDocumentsSearchResponse200 | postApiV1TypesenseCollectionsCollectionDocumentsSearchResponse400;
    
export type postApiV1TypesenseCollectionsCollectionDocumentsSearchResponse = postApiV1TypesenseCollectionsCollectionDocumentsSearchResponseComposite & {
  headers: Headers;
}

export const getPostApiV1TypesenseCollectionsCollectionDocumentsSearchUrl = (collection: string,) => {


  

  return `/api/v1/typesense/collections/${collection}/documents/search`
}

export const postApiV1TypesenseCollectionsCollectionDocumentsSearch = async (collection: string,
    modelsSearchParameters: ModelsSearchParameters, options?: RequestInit): Promise<postApiV1TypesenseCollectionsCollectionDocumentsSearchResponse> => {
  
  return customFetch<postApiV1TypesenseCollectionsCollectionDocumentsSearchResponse>(getPostApiV1TypesenseCollectionsCollectionDocumentsSearchUrl(collection),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsSearchParameters,)
  }
);}


/**
 * Realiza busca em várias coleções simultaneamente
 * @summary Buscar em múltiplas coleções
 */
export type postApiV1TypesenseMultiSearchResponse200 = {
  data: ModelsMultiCollectionSearchResponse
  status: 200
}

export type postApiV1TypesenseMultiSearchResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type postApiV1TypesenseMultiSearchResponseComposite = postApiV1TypesenseMultiSearchResponse200 | postApiV1TypesenseMultiSearchResponse400;
    
export type postApiV1TypesenseMultiSearchResponse = postApiV1TypesenseMultiSearchResponseComposite & {
  headers: Headers;
}

export const getPostApiV1TypesenseMultiSearchUrl = () => {


  

  return `/api/v1/typesense/multi-search`
}

export const postApiV1TypesenseMultiSearch = async (modelsMultiCollectionSearchParameters: ModelsMultiCollectionSearchParameters, options?: RequestInit): Promise<postApiV1TypesenseMultiSearchResponse> => {
  
  return customFetch<postApiV1TypesenseMultiSearchResponse>(getPostApiV1TypesenseMultiSearchUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsMultiCollectionSearchParameters,)
  }
);}


