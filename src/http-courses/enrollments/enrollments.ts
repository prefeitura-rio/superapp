/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
  GetApiV1EnrollmentsUserCpf200,
  GetApiV1EnrollmentsUserCpfParams,
  ModelsErrorResponse
} from '.././models';

import { customFetch } from '../../../custom-fetch';

/**
 * Retorna lista paginada de inscrições realizadas por um usuário (identificado pelo CPF)
 * @summary Listar inscrições de um usuário específico
 */
export type getApiV1EnrollmentsUserCpfResponse200 = {
  data: GetApiV1EnrollmentsUserCpf200
  status: 200
}

export type getApiV1EnrollmentsUserCpfResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type getApiV1EnrollmentsUserCpfResponseComposite = getApiV1EnrollmentsUserCpfResponse200 | getApiV1EnrollmentsUserCpfResponse400;
    
export type getApiV1EnrollmentsUserCpfResponse = getApiV1EnrollmentsUserCpfResponseComposite & {
  headers: Headers;
}

export const getGetApiV1EnrollmentsUserCpfUrl = (cpf: string,
    params?: GetApiV1EnrollmentsUserCpfParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/enrollments/user/${cpf}?${stringifiedParams}` : `/api/v1/enrollments/user/${cpf}`
}

export const getApiV1EnrollmentsUserCpf = async (cpf: string,
    params?: GetApiV1EnrollmentsUserCpfParams, options?: RequestInit): Promise<getApiV1EnrollmentsUserCpfResponse> => {
  
  return customFetch<getApiV1EnrollmentsUserCpfResponse>(getGetApiV1EnrollmentsUserCpfUrl(cpf,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


