/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
    DeleteApiV1EmpresasId200,
    GetApiV1Empresas200,
    GetApiV1EmpresasParams,
    ModelsEmpresa,
    ModelsEmpresaBody,
    ModelsErrorResponse
} from '.././models';

import { customFetch } from '../../../custom-fetch-course';

/**
 * Retorna uma lista paginada de empresas
 * @summary Listar empresas
 */
export type getApiV1EmpresasResponse200 = {
  data: GetApiV1Empresas200
  status: 200
}

export type getApiV1EmpresasResponse500 = {
  data: ModelsErrorResponse
  status: 500
}
    
export type getApiV1EmpresasResponseComposite = getApiV1EmpresasResponse200 | getApiV1EmpresasResponse500;
    
export type getApiV1EmpresasResponse = getApiV1EmpresasResponseComposite & {
  headers: Headers;
}

export const getGetApiV1EmpresasUrl = (params?: GetApiV1EmpresasParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/empresas?${stringifiedParams}` : `/api/v1/empresas`
}

export const getApiV1Empresas = async (params?: GetApiV1EmpresasParams, options?: RequestInit): Promise<getApiV1EmpresasResponse> => {
  
  return customFetch<getApiV1EmpresasResponse>(getGetApiV1EmpresasUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Cria uma nova empresa
 * @summary Criar empresa
 */
export type postApiV1EmpresasResponse201 = {
  data: ModelsEmpresa
  status: 201
}

export type postApiV1EmpresasResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type postApiV1EmpresasResponseComposite = postApiV1EmpresasResponse201 | postApiV1EmpresasResponse400;
    
export type postApiV1EmpresasResponse = postApiV1EmpresasResponseComposite & {
  headers: Headers;
}

export const getPostApiV1EmpresasUrl = () => {


  

  return `/api/v1/empresas`
}

export const postApiV1Empresas = async (modelsEmpresaBody: ModelsEmpresaBody, options?: RequestInit): Promise<postApiV1EmpresasResponse> => {
  
  return customFetch<postApiV1EmpresasResponse>(getPostApiV1EmpresasUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsEmpresaBody,)
  }
);}


/**
 * Retorna uma empresa pelo seu ID
 * @summary Obter empresa por ID
 */
export type getApiV1EmpresasIdResponse200 = {
  data: ModelsEmpresa
  status: 200
}

export type getApiV1EmpresasIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type getApiV1EmpresasIdResponseComposite = getApiV1EmpresasIdResponse200 | getApiV1EmpresasIdResponse400;
    
export type getApiV1EmpresasIdResponse = getApiV1EmpresasIdResponseComposite & {
  headers: Headers;
}

export const getGetApiV1EmpresasIdUrl = (id: number,) => {


  

  return `/api/v1/empresas/${id}`
}

export const getApiV1EmpresasId = async (id: number, options?: RequestInit): Promise<getApiV1EmpresasIdResponse> => {
  
  return customFetch<getApiV1EmpresasIdResponse>(getGetApiV1EmpresasIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Atualiza os dados de uma empresa existente
 * @summary Atualizar empresa
 */
export type putApiV1EmpresasIdResponse200 = {
  data: ModelsEmpresa
  status: 200
}

export type putApiV1EmpresasIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type putApiV1EmpresasIdResponseComposite = putApiV1EmpresasIdResponse200 | putApiV1EmpresasIdResponse400;
    
export type putApiV1EmpresasIdResponse = putApiV1EmpresasIdResponseComposite & {
  headers: Headers;
}

export const getPutApiV1EmpresasIdUrl = (id: number,) => {


  

  return `/api/v1/empresas/${id}`
}

export const putApiV1EmpresasId = async (id: number,
    modelsEmpresaBody: ModelsEmpresaBody, options?: RequestInit): Promise<putApiV1EmpresasIdResponse> => {
  
  return customFetch<putApiV1EmpresasIdResponse>(getPutApiV1EmpresasIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsEmpresaBody,)
  }
);}


/**
 * Remove uma empresa pelo ID
 * @summary Excluir empresa
 */
export type deleteApiV1EmpresasIdResponse200 = {
  data: DeleteApiV1EmpresasId200
  status: 200
}

export type deleteApiV1EmpresasIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type deleteApiV1EmpresasIdResponseComposite = deleteApiV1EmpresasIdResponse200 | deleteApiV1EmpresasIdResponse400;
    
export type deleteApiV1EmpresasIdResponse = deleteApiV1EmpresasIdResponseComposite & {
  headers: Headers;
}

export const getDeleteApiV1EmpresasIdUrl = (id: number,) => {


  

  return `/api/v1/empresas/${id}`
}

export const deleteApiV1EmpresasId = async (id: number, options?: RequestInit): Promise<deleteApiV1EmpresasIdResponse> => {
  
  return customFetch<deleteApiV1EmpresasIdResponse>(getDeleteApiV1EmpresasIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


