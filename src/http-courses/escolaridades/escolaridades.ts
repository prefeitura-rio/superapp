/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
    DeleteApiV1EscolaridadesId200,
    GetApiV1Escolaridades200,
    GetApiV1EscolaridadesParams,
    ModelsErrorResponse,
    ModelsEscolaridade,
    ModelsEscolaridadeBody
} from '.././models';

import { customFetch } from '../../../custom-fetch-course';

/**
 * Retorna uma lista paginada de escolaridades
 * @summary Listar escolaridades
 */
export type getApiV1EscolaridadesResponse200 = {
  data: GetApiV1Escolaridades200
  status: 200
}

export type getApiV1EscolaridadesResponse500 = {
  data: ModelsErrorResponse
  status: 500
}
    
export type getApiV1EscolaridadesResponseComposite = getApiV1EscolaridadesResponse200 | getApiV1EscolaridadesResponse500;
    
export type getApiV1EscolaridadesResponse = getApiV1EscolaridadesResponseComposite & {
  headers: Headers;
}

export const getGetApiV1EscolaridadesUrl = (params?: GetApiV1EscolaridadesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/escolaridades?${stringifiedParams}` : `/api/v1/escolaridades`
}

export const getApiV1Escolaridades = async (params?: GetApiV1EscolaridadesParams, options?: RequestInit): Promise<getApiV1EscolaridadesResponse> => {
  
  return customFetch<getApiV1EscolaridadesResponse>(getGetApiV1EscolaridadesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Cria um novo nível de escolaridade
 * @summary Criar escolaridade
 */
export type postApiV1EscolaridadesResponse201 = {
  data: ModelsEscolaridade
  status: 201
}

export type postApiV1EscolaridadesResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type postApiV1EscolaridadesResponseComposite = postApiV1EscolaridadesResponse201 | postApiV1EscolaridadesResponse400;
    
export type postApiV1EscolaridadesResponse = postApiV1EscolaridadesResponseComposite & {
  headers: Headers;
}

export const getPostApiV1EscolaridadesUrl = () => {


  

  return `/api/v1/escolaridades`
}

export const postApiV1Escolaridades = async (modelsEscolaridadeBody: ModelsEscolaridadeBody, options?: RequestInit): Promise<postApiV1EscolaridadesResponse> => {
  
  return customFetch<postApiV1EscolaridadesResponse>(getPostApiV1EscolaridadesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsEscolaridadeBody,)
  }
);}


/**
 * Retorna uma escolaridade pelo seu ID
 * @summary Obter escolaridade por ID
 */
export type getApiV1EscolaridadesIdResponse200 = {
  data: ModelsEscolaridade
  status: 200
}

export type getApiV1EscolaridadesIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type getApiV1EscolaridadesIdResponseComposite = getApiV1EscolaridadesIdResponse200 | getApiV1EscolaridadesIdResponse400;
    
export type getApiV1EscolaridadesIdResponse = getApiV1EscolaridadesIdResponseComposite & {
  headers: Headers;
}

export const getGetApiV1EscolaridadesIdUrl = (id: number,) => {


  

  return `/api/v1/escolaridades/${id}`
}

export const getApiV1EscolaridadesId = async (id: number, options?: RequestInit): Promise<getApiV1EscolaridadesIdResponse> => {
  
  return customFetch<getApiV1EscolaridadesIdResponse>(getGetApiV1EscolaridadesIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Atualiza os dados de uma escolaridade existente
 * @summary Atualizar escolaridade
 */
export type putApiV1EscolaridadesIdResponse200 = {
  data: ModelsEscolaridade
  status: 200
}

export type putApiV1EscolaridadesIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type putApiV1EscolaridadesIdResponseComposite = putApiV1EscolaridadesIdResponse200 | putApiV1EscolaridadesIdResponse400;
    
export type putApiV1EscolaridadesIdResponse = putApiV1EscolaridadesIdResponseComposite & {
  headers: Headers;
}

export const getPutApiV1EscolaridadesIdUrl = (id: number,) => {


  

  return `/api/v1/escolaridades/${id}`
}

export const putApiV1EscolaridadesId = async (id: number,
    modelsEscolaridadeBody: ModelsEscolaridadeBody, options?: RequestInit): Promise<putApiV1EscolaridadesIdResponse> => {
  
  return customFetch<putApiV1EscolaridadesIdResponse>(getPutApiV1EscolaridadesIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsEscolaridadeBody,)
  }
);}


/**
 * Remove uma escolaridade pelo ID
 * @summary Excluir escolaridade
 */
export type deleteApiV1EscolaridadesIdResponse200 = {
  data: DeleteApiV1EscolaridadesId200
  status: 200
}

export type deleteApiV1EscolaridadesIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type deleteApiV1EscolaridadesIdResponseComposite = deleteApiV1EscolaridadesIdResponse200 | deleteApiV1EscolaridadesIdResponse400;
    
export type deleteApiV1EscolaridadesIdResponse = deleteApiV1EscolaridadesIdResponseComposite & {
  headers: Headers;
}

export const getDeleteApiV1EscolaridadesIdUrl = (id: number,) => {


  

  return `/api/v1/escolaridades/${id}`
}

export const deleteApiV1EscolaridadesId = async (id: number, options?: RequestInit): Promise<deleteApiV1EscolaridadesIdResponse> => {
  
  return customFetch<deleteApiV1EscolaridadesIdResponse>(getDeleteApiV1EscolaridadesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


