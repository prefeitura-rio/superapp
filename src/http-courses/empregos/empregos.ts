/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
    DeleteApiV1EmpregosId200,
    GetApiV1Empregos200,
    GetApiV1EmpregosParams,
    ModelsEmprego,
    ModelsEmpregoBody,
    ModelsErrorResponse
} from '.././models';

import { customFetch } from '../../../custom-fetch-course';

/**
 * Retorna uma lista paginada de empregos com filtros opcionais
 * @summary Listar empregos
 */
export type getApiV1EmpregosResponse200 = {
  data: GetApiV1Empregos200
  status: 200
}

export type getApiV1EmpregosResponse500 = {
  data: ModelsErrorResponse
  status: 500
}
    
export type getApiV1EmpregosResponseComposite = getApiV1EmpregosResponse200 | getApiV1EmpregosResponse500;
    
export type getApiV1EmpregosResponse = getApiV1EmpregosResponseComposite & {
  headers: Headers;
}

export const getGetApiV1EmpregosUrl = (params?: GetApiV1EmpregosParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/empregos?${stringifiedParams}` : `/api/v1/empregos`
}

export const getApiV1Empregos = async (params?: GetApiV1EmpregosParams, options?: RequestInit): Promise<getApiV1EmpregosResponse> => {
  
  return customFetch<getApiV1EmpregosResponse>(getGetApiV1EmpregosUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Cria uma nova oportunidade de emprego
 * @summary Criar emprego
 */
export type postApiV1EmpregosResponse201 = {
  data: ModelsEmprego
  status: 201
}

export type postApiV1EmpregosResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type postApiV1EmpregosResponseComposite = postApiV1EmpregosResponse201 | postApiV1EmpregosResponse400;
    
export type postApiV1EmpregosResponse = postApiV1EmpregosResponseComposite & {
  headers: Headers;
}

export const getPostApiV1EmpregosUrl = () => {


  

  return `/api/v1/empregos`
}

export const postApiV1Empregos = async (modelsEmpregoBody: ModelsEmpregoBody, options?: RequestInit): Promise<postApiV1EmpregosResponse> => {
  
  return customFetch<postApiV1EmpregosResponse>(getPostApiV1EmpregosUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsEmpregoBody,)
  }
);}


/**
 * Retorna um emprego pelo seu ID
 * @summary Obter emprego por ID
 */
export type getApiV1EmpregosIdResponse200 = {
  data: ModelsEmprego
  status: 200
}

export type getApiV1EmpregosIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type getApiV1EmpregosIdResponseComposite = getApiV1EmpregosIdResponse200 | getApiV1EmpregosIdResponse400;
    
export type getApiV1EmpregosIdResponse = getApiV1EmpregosIdResponseComposite & {
  headers: Headers;
}

export const getGetApiV1EmpregosIdUrl = (id: number,) => {


  

  return `/api/v1/empregos/${id}`
}

export const getApiV1EmpregosId = async (id: number, options?: RequestInit): Promise<getApiV1EmpregosIdResponse> => {
  
  return customFetch<getApiV1EmpregosIdResponse>(getGetApiV1EmpregosIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Atualiza os dados de um emprego existente
 * @summary Atualizar emprego
 */
export type putApiV1EmpregosIdResponse200 = {
  data: ModelsEmprego
  status: 200
}

export type putApiV1EmpregosIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type putApiV1EmpregosIdResponseComposite = putApiV1EmpregosIdResponse200 | putApiV1EmpregosIdResponse400;
    
export type putApiV1EmpregosIdResponse = putApiV1EmpregosIdResponseComposite & {
  headers: Headers;
}

export const getPutApiV1EmpregosIdUrl = (id: number,) => {


  

  return `/api/v1/empregos/${id}`
}

export const putApiV1EmpregosId = async (id: number,
    modelsEmpregoBody: ModelsEmpregoBody, options?: RequestInit): Promise<putApiV1EmpregosIdResponse> => {
  
  return customFetch<putApiV1EmpregosIdResponse>(getPutApiV1EmpregosIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsEmpregoBody,)
  }
);}


/**
 * Remove um emprego pelo ID
 * @summary Excluir emprego
 */
export type deleteApiV1EmpregosIdResponse200 = {
  data: DeleteApiV1EmpregosId200
  status: 200
}

export type deleteApiV1EmpregosIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type deleteApiV1EmpregosIdResponseComposite = deleteApiV1EmpregosIdResponse200 | deleteApiV1EmpregosIdResponse400;
    
export type deleteApiV1EmpregosIdResponse = deleteApiV1EmpregosIdResponseComposite & {
  headers: Headers;
}

export const getDeleteApiV1EmpregosIdUrl = (id: number,) => {


  

  return `/api/v1/empregos/${id}`
}

export const deleteApiV1EmpregosId = async (id: number, options?: RequestInit): Promise<deleteApiV1EmpregosIdResponse> => {
  
  return customFetch<deleteApiV1EmpregosIdResponse>(getDeleteApiV1EmpregosIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


