/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
  DeleteApiV1AcessibilidadesId200,
  GetApiV1Acessibilidades200,
  GetApiV1AcessibilidadesParams,
  ModelsAcessibilidade,
  ModelsAcessibilidadeBody,
  ModelsErrorResponse
} from '.././models';

import { customFetch } from '../../../custom-fetch-course';

/**
 * Retorna uma lista paginada de acessibilidades
 * @summary Listar acessibilidades
 */
export type getApiV1AcessibilidadesResponse200 = {
  data: GetApiV1Acessibilidades200
  status: 200
}

export type getApiV1AcessibilidadesResponse500 = {
  data: ModelsErrorResponse
  status: 500
}
    
export type getApiV1AcessibilidadesResponseComposite = getApiV1AcessibilidadesResponse200 | getApiV1AcessibilidadesResponse500;
    
export type getApiV1AcessibilidadesResponse = getApiV1AcessibilidadesResponseComposite & {
  headers: Headers;
}

export const getGetApiV1AcessibilidadesUrl = (params?: GetApiV1AcessibilidadesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/acessibilidades?${stringifiedParams}` : `/api/v1/acessibilidades`
}

export const getApiV1Acessibilidades = async (params?: GetApiV1AcessibilidadesParams, options?: RequestInit): Promise<getApiV1AcessibilidadesResponse> => {
  
  return customFetch<getApiV1AcessibilidadesResponse>(getGetApiV1AcessibilidadesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Cria um novo tipo de acessibilidade
 * @summary Criar acessibilidade
 */
export type postApiV1AcessibilidadesResponse201 = {
  data: ModelsAcessibilidade
  status: 201
}

export type postApiV1AcessibilidadesResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type postApiV1AcessibilidadesResponseComposite = postApiV1AcessibilidadesResponse201 | postApiV1AcessibilidadesResponse400;
    
export type postApiV1AcessibilidadesResponse = postApiV1AcessibilidadesResponseComposite & {
  headers: Headers;
}

export const getPostApiV1AcessibilidadesUrl = () => {


  

  return `/api/v1/acessibilidades`
}

export const postApiV1Acessibilidades = async (modelsAcessibilidadeBody: ModelsAcessibilidadeBody, options?: RequestInit): Promise<postApiV1AcessibilidadesResponse> => {
  
  return customFetch<postApiV1AcessibilidadesResponse>(getPostApiV1AcessibilidadesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsAcessibilidadeBody,)
  }
);}


/**
 * Retorna uma acessibilidade pelo seu ID
 * @summary Obter acessibilidade por ID
 */
export type getApiV1AcessibilidadesIdResponse200 = {
  data: ModelsAcessibilidade
  status: 200
}

export type getApiV1AcessibilidadesIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type getApiV1AcessibilidadesIdResponseComposite = getApiV1AcessibilidadesIdResponse200 | getApiV1AcessibilidadesIdResponse400;
    
export type getApiV1AcessibilidadesIdResponse = getApiV1AcessibilidadesIdResponseComposite & {
  headers: Headers;
}

export const getGetApiV1AcessibilidadesIdUrl = (id: number,) => {


  

  return `/api/v1/acessibilidades/${id}`
}

export const getApiV1AcessibilidadesId = async (id: number, options?: RequestInit): Promise<getApiV1AcessibilidadesIdResponse> => {
  
  return customFetch<getApiV1AcessibilidadesIdResponse>(getGetApiV1AcessibilidadesIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Atualiza os dados de uma acessibilidade existente
 * @summary Atualizar acessibilidade
 */
export type putApiV1AcessibilidadesIdResponse200 = {
  data: ModelsAcessibilidade
  status: 200
}

export type putApiV1AcessibilidadesIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type putApiV1AcessibilidadesIdResponseComposite = putApiV1AcessibilidadesIdResponse200 | putApiV1AcessibilidadesIdResponse400;
    
export type putApiV1AcessibilidadesIdResponse = putApiV1AcessibilidadesIdResponseComposite & {
  headers: Headers;
}

export const getPutApiV1AcessibilidadesIdUrl = (id: number,) => {


  

  return `/api/v1/acessibilidades/${id}`
}

export const putApiV1AcessibilidadesId = async (id: number,
    modelsAcessibilidadeBody: ModelsAcessibilidadeBody, options?: RequestInit): Promise<putApiV1AcessibilidadesIdResponse> => {
  
  return customFetch<putApiV1AcessibilidadesIdResponse>(getPutApiV1AcessibilidadesIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsAcessibilidadeBody,)
  }
);}


/**
 * Remove uma acessibilidade pelo ID
 * @summary Excluir acessibilidade
 */
export type deleteApiV1AcessibilidadesIdResponse200 = {
  data: DeleteApiV1AcessibilidadesId200
  status: 200
}

export type deleteApiV1AcessibilidadesIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type deleteApiV1AcessibilidadesIdResponseComposite = deleteApiV1AcessibilidadesIdResponse200 | deleteApiV1AcessibilidadesIdResponse400;
    
export type deleteApiV1AcessibilidadesIdResponse = deleteApiV1AcessibilidadesIdResponseComposite & {
  headers: Headers;
}

export const getDeleteApiV1AcessibilidadesIdUrl = (id: number,) => {


  

  return `/api/v1/acessibilidades/${id}`
}

export const deleteApiV1AcessibilidadesId = async (id: number, options?: RequestInit): Promise<deleteApiV1AcessibilidadesIdResponse> => {
  
  return customFetch<deleteApiV1AcessibilidadesIdResponse>(getDeleteApiV1AcessibilidadesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


