/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
    DeleteApiV1CategoriasId200,
    GetApiV1Categorias200,
    GetApiV1CategoriasParams,
    ModelsCategoria,
    ModelsCategoriaBody,
    ModelsErrorResponse
} from '.././models';

import { customFetch } from '../../../custom-fetch-course';

/**
 * Retorna uma lista paginada de categorias
 * @summary Listar categorias
 */
export type getApiV1CategoriasResponse200 = {
  data: GetApiV1Categorias200
  status: 200
}

export type getApiV1CategoriasResponse500 = {
  data: ModelsErrorResponse
  status: 500
}
    
export type getApiV1CategoriasResponseComposite = getApiV1CategoriasResponse200 | getApiV1CategoriasResponse500;
    
export type getApiV1CategoriasResponse = getApiV1CategoriasResponseComposite & {
  headers: Headers;
}

export const getGetApiV1CategoriasUrl = (params?: GetApiV1CategoriasParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/categorias?${stringifiedParams}` : `/api/v1/categorias`
}

export const getApiV1Categorias = async (params?: GetApiV1CategoriasParams, options?: RequestInit): Promise<getApiV1CategoriasResponse> => {
  
  return customFetch<getApiV1CategoriasResponse>(getGetApiV1CategoriasUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Cria uma nova categoria
 * @summary Criar categoria
 */
export type postApiV1CategoriasResponse201 = {
  data: ModelsCategoria
  status: 201
}

export type postApiV1CategoriasResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type postApiV1CategoriasResponseComposite = postApiV1CategoriasResponse201 | postApiV1CategoriasResponse400;
    
export type postApiV1CategoriasResponse = postApiV1CategoriasResponseComposite & {
  headers: Headers;
}

export const getPostApiV1CategoriasUrl = () => {


  

  return `/api/v1/categorias`
}

export const postApiV1Categorias = async (modelsCategoriaBody: ModelsCategoriaBody, options?: RequestInit): Promise<postApiV1CategoriasResponse> => {
  
  return customFetch<postApiV1CategoriasResponse>(getPostApiV1CategoriasUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsCategoriaBody,)
  }
);}


/**
 * Retorna uma categoria pelo seu ID
 * @summary Obter categoria por ID
 */
export type getApiV1CategoriasIdResponse200 = {
  data: ModelsCategoria
  status: 200
}

export type getApiV1CategoriasIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type getApiV1CategoriasIdResponseComposite = getApiV1CategoriasIdResponse200 | getApiV1CategoriasIdResponse400;
    
export type getApiV1CategoriasIdResponse = getApiV1CategoriasIdResponseComposite & {
  headers: Headers;
}

export const getGetApiV1CategoriasIdUrl = (id: number,) => {


  

  return `/api/v1/categorias/${id}`
}

export const getApiV1CategoriasId = async (id: number, options?: RequestInit): Promise<getApiV1CategoriasIdResponse> => {
  
  return customFetch<getApiV1CategoriasIdResponse>(getGetApiV1CategoriasIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Atualiza os dados de uma categoria existente
 * @summary Atualizar categoria
 */
export type putApiV1CategoriasIdResponse200 = {
  data: ModelsCategoria
  status: 200
}

export type putApiV1CategoriasIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type putApiV1CategoriasIdResponseComposite = putApiV1CategoriasIdResponse200 | putApiV1CategoriasIdResponse400;
    
export type putApiV1CategoriasIdResponse = putApiV1CategoriasIdResponseComposite & {
  headers: Headers;
}

export const getPutApiV1CategoriasIdUrl = (id: number,) => {


  

  return `/api/v1/categorias/${id}`
}

export const putApiV1CategoriasId = async (id: number,
    modelsCategoriaBody: ModelsCategoriaBody, options?: RequestInit): Promise<putApiV1CategoriasIdResponse> => {
  
  return customFetch<putApiV1CategoriasIdResponse>(getPutApiV1CategoriasIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsCategoriaBody,)
  }
);}


/**
 * Remove uma categoria pelo ID
 * @summary Excluir categoria
 */
export type deleteApiV1CategoriasIdResponse200 = {
  data: DeleteApiV1CategoriasId200
  status: 200
}

export type deleteApiV1CategoriasIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}
    
export type deleteApiV1CategoriasIdResponseComposite = deleteApiV1CategoriasIdResponse200 | deleteApiV1CategoriasIdResponse400;
    
export type deleteApiV1CategoriasIdResponse = deleteApiV1CategoriasIdResponseComposite & {
  headers: Headers;
}

export const getDeleteApiV1CategoriasIdUrl = (id: number,) => {


  

  return `/api/v1/categorias/${id}`
}

export const deleteApiV1CategoriasId = async (id: number, options?: RequestInit): Promise<deleteApiV1CategoriasIdResponse> => {
  
  return customFetch<deleteApiV1CategoriasIdResponse>(getDeleteApiV1CategoriasIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


