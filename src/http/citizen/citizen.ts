/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * API RMI
 * API para gerenciamento de dados de cidadãos do Rio de Janeiro, incluindo autodeclaração de informações e verificação de contato.
 * OpenAPI spec version: 1.0
 */
import type {
  HandlersErrorResponse,
  HandlersSuccessResponse,
  ModelsCitizen,
  ModelsPhoneVerificationValidateRequest,
  ModelsSelfDeclaredAddressInput,
  ModelsSelfDeclaredEmailInput,
  ModelsSelfDeclaredPhoneInput,
  ModelsSelfDeclaredRacaInput,
  ModelsUserConfigOptInResponse,
  ModelsUserConfigResponse,
} from '.././models'

import { customFetch } from '../../../custom-fetch'

/**
 * Retorna a lista de opções válidas de etnia para autodeclaração. Esta lista é usada para validar as atualizações de etnia autodeclarada.
 * @summary Listar opções de etnia
 */
export type getCitizenEthnicityOptionsResponse200 = {
  data: string[]
  status: 200
}

export type getCitizenEthnicityOptionsResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type getCitizenEthnicityOptionsResponseComposite =
  | getCitizenEthnicityOptionsResponse200
  | getCitizenEthnicityOptionsResponse500

export type getCitizenEthnicityOptionsResponse =
  getCitizenEthnicityOptionsResponseComposite & {
    headers: Headers
  }

export const getGetCitizenEthnicityOptionsUrl = () => {
  return `/citizen/ethnicity/options`
}

export const getCitizenEthnicityOptions = async (
  options?: RequestInit
): Promise<getCitizenEthnicityOptionsResponse> => {
  return customFetch<getCitizenEthnicityOptionsResponse>(
    getGetCitizenEthnicityOptionsUrl(),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Recupera os dados do cidadão por CPF, combinando dados base com atualizações autodeclaradas. Dados autodeclarados têm precedência sobre dados base. Os resultados são armazenados em cache usando Redis com TTL configurável.
 * @summary Obter dados do cidadão
 */
export type getCitizenCpfResponse200 = {
  data: ModelsCitizen
  status: 200
}

export type getCitizenCpfResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfResponseComposite =
  | getCitizenCpfResponse200
  | getCitizenCpfResponse400

export type getCitizenCpfResponse = getCitizenCpfResponseComposite & {
  headers: Headers
}

export const getGetCitizenCpfUrl = (cpf: string) => {
  return `/citizen/${cpf}`
}

export const getCitizenCpf = async (
  cpf: string,
  options?: RequestInit
): Promise<getCitizenCpfResponse> => {
  return customFetch<getCitizenCpfResponse>(getGetCitizenCpfUrl(cpf), {
    ...options,
    method: 'GET',
  })
}

/**
 * Atualiza ou cria o endereço autodeclarado de um cidadão por CPF. Apenas o campo de endereço é atualizado.
 * @summary Atualizar endereço autodeclarado
 */
export type putCitizenCpfAddressResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type putCitizenCpfAddressResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfAddressResponseComposite =
  | putCitizenCpfAddressResponse200
  | putCitizenCpfAddressResponse400

export type putCitizenCpfAddressResponse =
  putCitizenCpfAddressResponseComposite & {
    headers: Headers
  }

export const getPutCitizenCpfAddressUrl = (cpf: string) => {
  return `/citizen/${cpf}/address`
}

export const putCitizenCpfAddress = async (
  cpf: string,
  modelsSelfDeclaredAddressInput: ModelsSelfDeclaredAddressInput,
  options?: RequestInit
): Promise<putCitizenCpfAddressResponse> => {
  return customFetch<putCitizenCpfAddressResponse>(
    getPutCitizenCpfAddressUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSelfDeclaredAddressInput),
    }
  )
}

/**
 * Atualiza ou cria o email autodeclarado de um cidadão por CPF. Apenas o campo de email é atualizado.
 * @summary Atualizar email autodeclarado
 */
export type putCitizenCpfEmailResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type putCitizenCpfEmailResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfEmailResponseComposite =
  | putCitizenCpfEmailResponse200
  | putCitizenCpfEmailResponse400

export type putCitizenCpfEmailResponse = putCitizenCpfEmailResponseComposite & {
  headers: Headers
}

export const getPutCitizenCpfEmailUrl = (cpf: string) => {
  return `/citizen/${cpf}/email`
}

export const putCitizenCpfEmail = async (
  cpf: string,
  modelsSelfDeclaredEmailInput: ModelsSelfDeclaredEmailInput,
  options?: RequestInit
): Promise<putCitizenCpfEmailResponse> => {
  return customFetch<putCitizenCpfEmailResponse>(
    getPutCitizenCpfEmailUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSelfDeclaredEmailInput),
    }
  )
}

/**
 * Atualiza ou cria a etnia autodeclarada de um cidadão por CPF. Apenas o campo de etnia é atualizado. O valor deve ser uma das opções válidas retornadas pelo endpoint /citizen/ethnicity/options.
 * @summary Atualizar etnia autodeclarada
 */
export type putCitizenCpfEthnicityResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type putCitizenCpfEthnicityResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfEthnicityResponseComposite =
  | putCitizenCpfEthnicityResponse200
  | putCitizenCpfEthnicityResponse400

export type putCitizenCpfEthnicityResponse =
  putCitizenCpfEthnicityResponseComposite & {
    headers: Headers
  }

export const getPutCitizenCpfEthnicityUrl = (cpf: string) => {
  return `/citizen/${cpf}/ethnicity`
}

export const putCitizenCpfEthnicity = async (
  cpf: string,
  modelsSelfDeclaredRacaInput: ModelsSelfDeclaredRacaInput,
  options?: RequestInit
): Promise<putCitizenCpfEthnicityResponse> => {
  return customFetch<putCitizenCpfEthnicityResponse>(
    getPutCitizenCpfEthnicityUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSelfDeclaredRacaInput),
    }
  )
}

/**
 * Verifica se este é o primeiro login do usuário
 * @summary Obter status do primeiro login
 */
export type getCitizenCpfFirstloginResponse200 = {
  data: ModelsUserConfigResponse
  status: 200
}

export type getCitizenCpfFirstloginResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfFirstloginResponseComposite =
  | getCitizenCpfFirstloginResponse200
  | getCitizenCpfFirstloginResponse400

export type getCitizenCpfFirstloginResponse =
  getCitizenCpfFirstloginResponseComposite & {
    headers: Headers
  }

export const getGetCitizenCpfFirstloginUrl = (cpf: string) => {
  return `/citizen/${cpf}/firstlogin`
}

export const getCitizenCpfFirstlogin = async (
  cpf: string,
  options?: RequestInit
): Promise<getCitizenCpfFirstloginResponse> => {
  return customFetch<getCitizenCpfFirstloginResponse>(
    getGetCitizenCpfFirstloginUrl(cpf),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Define o status do primeiro login como falso para um usuário
 * @summary Atualizar status do primeiro login
 */
export type putCitizenCpfFirstloginResponse200 = {
  data: ModelsUserConfigResponse
  status: 200
}

export type putCitizenCpfFirstloginResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfFirstloginResponseComposite =
  | putCitizenCpfFirstloginResponse200
  | putCitizenCpfFirstloginResponse400

export type putCitizenCpfFirstloginResponse =
  putCitizenCpfFirstloginResponseComposite & {
    headers: Headers
  }

export const getPutCitizenCpfFirstloginUrl = (cpf: string) => {
  return `/citizen/${cpf}/firstlogin`
}

export const putCitizenCpfFirstlogin = async (
  cpf: string,
  options?: RequestInit
): Promise<putCitizenCpfFirstloginResponse> => {
  return customFetch<putCitizenCpfFirstloginResponse>(
    getPutCitizenCpfFirstloginUrl(cpf),
    {
      ...options,
      method: 'PUT',
    }
  )
}

/**
 * Verifica se o usuário optou por receber notificações
 * @summary Obter status de opt-in
 */
export type getCitizenCpfOptinResponse200 = {
  data: ModelsUserConfigOptInResponse
  status: 200
}

export type getCitizenCpfOptinResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfOptinResponseComposite =
  | getCitizenCpfOptinResponse200
  | getCitizenCpfOptinResponse400

export type getCitizenCpfOptinResponse = getCitizenCpfOptinResponseComposite & {
  headers: Headers
}

export const getGetCitizenCpfOptinUrl = (cpf: string) => {
  return `/citizen/${cpf}/optin`
}

export const getCitizenCpfOptin = async (
  cpf: string,
  options?: RequestInit
): Promise<getCitizenCpfOptinResponse> => {
  return customFetch<getCitizenCpfOptinResponse>(
    getGetCitizenCpfOptinUrl(cpf),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Atualiza o status de opt-in do usuário para notificações
 * @summary Atualizar status de opt-in
 */
export type putCitizenCpfOptinResponse200 = {
  data: ModelsUserConfigOptInResponse
  status: 200
}

export type putCitizenCpfOptinResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfOptinResponseComposite =
  | putCitizenCpfOptinResponse200
  | putCitizenCpfOptinResponse400

export type putCitizenCpfOptinResponse = putCitizenCpfOptinResponseComposite & {
  headers: Headers
}

export const getPutCitizenCpfOptinUrl = (cpf: string) => {
  return `/citizen/${cpf}/optin`
}

export const putCitizenCpfOptin = async (
  cpf: string,
  modelsUserConfigOptInResponse: ModelsUserConfigOptInResponse,
  options?: RequestInit
): Promise<putCitizenCpfOptinResponse> => {
  return customFetch<putCitizenCpfOptinResponse>(
    getPutCitizenCpfOptinUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsUserConfigOptInResponse),
    }
  )
}

/**
 * Atualiza ou cria o telefone autodeclarado de um cidadão por CPF. Apenas o campo de telefone é atualizado (armazenado como pendente até verificado).
 * @summary Atualizar telefone autodeclarado
 */
export type putCitizenCpfPhoneResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type putCitizenCpfPhoneResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfPhoneResponseComposite =
  | putCitizenCpfPhoneResponse200
  | putCitizenCpfPhoneResponse400

export type putCitizenCpfPhoneResponse = putCitizenCpfPhoneResponseComposite & {
  headers: Headers
}

export const getPutCitizenCpfPhoneUrl = (cpf: string) => {
  return `/citizen/${cpf}/phone`
}

export const putCitizenCpfPhone = async (
  cpf: string,
  modelsSelfDeclaredPhoneInput: ModelsSelfDeclaredPhoneInput,
  options?: RequestInit
): Promise<putCitizenCpfPhoneResponse> => {
  return customFetch<putCitizenCpfPhoneResponse>(
    getPutCitizenCpfPhoneUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSelfDeclaredPhoneInput),
    }
  )
}

/**
 * Validates the verification code sent to the phone number
 * @summary Validate phone verification
 */
export type postCitizenCpfPhoneValidateResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type postCitizenCpfPhoneValidateResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postCitizenCpfPhoneValidateResponseComposite =
  | postCitizenCpfPhoneValidateResponse200
  | postCitizenCpfPhoneValidateResponse400

export type postCitizenCpfPhoneValidateResponse =
  postCitizenCpfPhoneValidateResponseComposite & {
    headers: Headers
  }

export const getPostCitizenCpfPhoneValidateUrl = (cpf: string) => {
  return `/citizen/${cpf}/phone/validate`
}

export const postCitizenCpfPhoneValidate = async (
  cpf: string,
  modelsPhoneVerificationValidateRequest: ModelsPhoneVerificationValidateRequest,
  options?: RequestInit
): Promise<postCitizenCpfPhoneValidateResponse> => {
  return customFetch<postCitizenCpfPhoneValidateResponse>(
    getPostCitizenCpfPhoneValidateUrl(cpf),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsPhoneVerificationValidateRequest),
    }
  )
}
