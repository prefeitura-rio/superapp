/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * RMI API
 * API for managing citizen data with self-declared information. This API provides endpoints for retrieving and updating citizen information, with support for caching and data validation. Self-declared data takes precedence over base data when available.
 * OpenAPI spec version: 1.0
 */
import type {
  HandlersErrorResponse,
  HandlersSuccessResponse,
  ModelsCitizen,
  ModelsPhoneVerificationValidateRequest,
  ModelsSelfDeclaredAddressInput,
  ModelsSelfDeclaredEmailInput,
  ModelsSelfDeclaredPhoneInput,
  ModelsUserConfigOptInResponse,
  ModelsUserConfigResponse,
} from '.././models'

import { customFetch } from '../../../custom-fetch'

/**
 * Retrieves citizen data by CPF, combining base data with any self-declared updates. Self-declared data takes precedence over base data. Results are cached using Redis with configurable TTL.
 * @summary Get citizen data
 */
export type getCitizenCpfResponse200 = {
  data: ModelsCitizen
  status: 200
}

export type getCitizenCpfResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfResponseComposite =
  | getCitizenCpfResponse200
  | getCitizenCpfResponse400

export type getCitizenCpfResponse = getCitizenCpfResponseComposite & {
  headers: Headers
}

export const getGetCitizenCpfUrl = (cpf: string) => {
  return `/citizen/${cpf}`
}

export const getCitizenCpf = async (
  cpf: string,
  options?: RequestInit
): Promise<getCitizenCpfResponse> => {
  return customFetch<getCitizenCpfResponse>(getGetCitizenCpfUrl(cpf), {
    ...options,
    method: 'GET',
  })
}

/**
 * Updates or creates the self-declared address for a citizen by CPF. Only the address field is updated.
 * @summary Update self-declared address for a citizen
 */
export type putCitizenCpfAddressResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type putCitizenCpfAddressResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfAddressResponseComposite =
  | putCitizenCpfAddressResponse200
  | putCitizenCpfAddressResponse400

export type putCitizenCpfAddressResponse =
  putCitizenCpfAddressResponseComposite & {
    headers: Headers
  }

export const getPutCitizenCpfAddressUrl = (cpf: string) => {
  return `/citizen/${cpf}/address`
}

export const putCitizenCpfAddress = async (
  cpf: string,
  modelsSelfDeclaredAddressInput: ModelsSelfDeclaredAddressInput,
  options?: RequestInit
): Promise<putCitizenCpfAddressResponse> => {
  return customFetch<putCitizenCpfAddressResponse>(
    getPutCitizenCpfAddressUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSelfDeclaredAddressInput),
    }
  )
}

/**
 * Updates or creates the self-declared email for a citizen by CPF. Only the email field is updated.
 * @summary Update self-declared email for a citizen
 */
export type putCitizenCpfEmailResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type putCitizenCpfEmailResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfEmailResponseComposite =
  | putCitizenCpfEmailResponse200
  | putCitizenCpfEmailResponse400

export type putCitizenCpfEmailResponse = putCitizenCpfEmailResponseComposite & {
  headers: Headers
}

export const getPutCitizenCpfEmailUrl = (cpf: string) => {
  return `/citizen/${cpf}/email`
}

export const putCitizenCpfEmail = async (
  cpf: string,
  modelsSelfDeclaredEmailInput: ModelsSelfDeclaredEmailInput,
  options?: RequestInit
): Promise<putCitizenCpfEmailResponse> => {
  return customFetch<putCitizenCpfEmailResponse>(
    getPutCitizenCpfEmailUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSelfDeclaredEmailInput),
    }
  )
}

/**
 * Checks if this is the user's first login
 * @summary Get first login status
 */
export type getCitizenCpfFirstloginResponse200 = {
  data: ModelsUserConfigResponse
  status: 200
}

export type getCitizenCpfFirstloginResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfFirstloginResponseComposite =
  | getCitizenCpfFirstloginResponse200
  | getCitizenCpfFirstloginResponse400

export type getCitizenCpfFirstloginResponse =
  getCitizenCpfFirstloginResponseComposite & {
    headers: Headers
  }

export const getGetCitizenCpfFirstloginUrl = (cpf: string) => {
  return `/citizen/${cpf}/firstlogin`
}

export const getCitizenCpfFirstlogin = async (
  cpf: string,
  options?: RequestInit
): Promise<getCitizenCpfFirstloginResponse> => {
  return customFetch<getCitizenCpfFirstloginResponse>(
    getGetCitizenCpfFirstloginUrl(cpf),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Sets the first login status to false for a user
 * @summary Update first login status
 */
export type putCitizenCpfFirstloginResponse200 = {
  data: ModelsUserConfigResponse
  status: 200
}

export type putCitizenCpfFirstloginResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfFirstloginResponseComposite =
  | putCitizenCpfFirstloginResponse200
  | putCitizenCpfFirstloginResponse400

export type putCitizenCpfFirstloginResponse =
  putCitizenCpfFirstloginResponseComposite & {
    headers: Headers
  }

export const getPutCitizenCpfFirstloginUrl = (cpf: string) => {
  return `/citizen/${cpf}/firstlogin`
}

export const putCitizenCpfFirstlogin = async (
  cpf: string,
  options?: RequestInit
): Promise<putCitizenCpfFirstloginResponse> => {
  return customFetch<putCitizenCpfFirstloginResponse>(
    getPutCitizenCpfFirstloginUrl(cpf),
    {
      ...options,
      method: 'PUT',
    }
  )
}

/**
 * Checks if the user has opted in for notifications
 * @summary Get opt-in status
 */
export type getCitizenCpfOptinResponse200 = {
  data: ModelsUserConfigOptInResponse
  status: 200
}

export type getCitizenCpfOptinResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfOptinResponseComposite =
  | getCitizenCpfOptinResponse200
  | getCitizenCpfOptinResponse400

export type getCitizenCpfOptinResponse = getCitizenCpfOptinResponseComposite & {
  headers: Headers
}

export const getGetCitizenCpfOptinUrl = (cpf: string) => {
  return `/citizen/${cpf}/optin`
}

export const getCitizenCpfOptin = async (
  cpf: string,
  options?: RequestInit
): Promise<getCitizenCpfOptinResponse> => {
  return customFetch<getCitizenCpfOptinResponse>(
    getGetCitizenCpfOptinUrl(cpf),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Updates the user's opt-in status for notifications
 * @summary Update opt-in status
 */
export type putCitizenCpfOptinResponse200 = {
  data: ModelsUserConfigOptInResponse
  status: 200
}

export type putCitizenCpfOptinResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfOptinResponseComposite =
  | putCitizenCpfOptinResponse200
  | putCitizenCpfOptinResponse400

export type putCitizenCpfOptinResponse = putCitizenCpfOptinResponseComposite & {
  headers: Headers
}

export const getPutCitizenCpfOptinUrl = (cpf: string) => {
  return `/citizen/${cpf}/optin`
}

export const putCitizenCpfOptin = async (
  cpf: string,
  modelsUserConfigOptInResponse: ModelsUserConfigOptInResponse,
  options?: RequestInit
): Promise<putCitizenCpfOptinResponse> => {
  return customFetch<putCitizenCpfOptinResponse>(
    getPutCitizenCpfOptinUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsUserConfigOptInResponse),
    }
  )
}

/**
 * Updates or creates the self-declared phone for a citizen by CPF. Only the phone field is updated (stored as pending until verified).
 * @summary Update self-declared phone for a citizen
 */
export type putCitizenCpfPhoneResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type putCitizenCpfPhoneResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfPhoneResponseComposite =
  | putCitizenCpfPhoneResponse200
  | putCitizenCpfPhoneResponse400

export type putCitizenCpfPhoneResponse = putCitizenCpfPhoneResponseComposite & {
  headers: Headers
}

export const getPutCitizenCpfPhoneUrl = (cpf: string) => {
  return `/citizen/${cpf}/phone`
}

export const putCitizenCpfPhone = async (
  cpf: string,
  modelsSelfDeclaredPhoneInput: ModelsSelfDeclaredPhoneInput,
  options?: RequestInit
): Promise<putCitizenCpfPhoneResponse> => {
  return customFetch<putCitizenCpfPhoneResponse>(
    getPutCitizenCpfPhoneUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSelfDeclaredPhoneInput),
    }
  )
}

/**
 * Validates the verification code sent to the phone number
 * @summary Validate phone verification
 */
export type postCitizenCpfPhoneValidateResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type postCitizenCpfPhoneValidateResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postCitizenCpfPhoneValidateResponseComposite =
  | postCitizenCpfPhoneValidateResponse200
  | postCitizenCpfPhoneValidateResponse400

export type postCitizenCpfPhoneValidateResponse =
  postCitizenCpfPhoneValidateResponseComposite & {
    headers: Headers
  }

export const getPostCitizenCpfPhoneValidateUrl = (cpf: string) => {
  return `/citizen/${cpf}/phone/validate`
}

export const postCitizenCpfPhoneValidate = async (
  cpf: string,
  modelsPhoneVerificationValidateRequest: ModelsPhoneVerificationValidateRequest,
  options?: RequestInit
): Promise<postCitizenCpfPhoneValidateResponse> => {
  return customFetch<postCitizenCpfPhoneValidateResponse>(
    getPostCitizenCpfPhoneValidateUrl(cpf),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsPhoneVerificationValidateRequest),
    }
  )
}
