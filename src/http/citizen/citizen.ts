/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * API RMI
 * API para gerenciamento de dados de cidad√£os do Rio de Janeiro, incluindo autodeclara√ß√£o de informa√ß√µes e verifica√ß√£o de contato.
 * OpenAPI spec version: 1.0
 */
import type {
  GetCitizenCpfLegalEntitiesParams,
  GetCitizenCpfMaintenanceRequestParams,
  GetCitizenCpfPetsParams,
  HandlersErrorResponse,
  HandlersSuccessResponse,
  ModelsCitizen,
  ModelsCitizenWallet,
  ModelsPaginatedLegalEntities,
  ModelsPaginatedMaintenanceRequests,
  ModelsPaginatedPets,
  ModelsPet,
  ModelsPetClinicResponse,
  ModelsPetStatsResponse,
  ModelsPhoneVerificationValidateRequest,
  ModelsSelfDeclaredAddressInput,
  ModelsSelfDeclaredEmailInput,
  ModelsSelfDeclaredNomeExibicaoInput,
  ModelsSelfDeclaredPhoneInput,
  ModelsSelfDeclaredRacaInput,
  ModelsUserConfigOptInResponse,
  ModelsUserConfigResponse,
} from '.././models'

import { customFetch } from '../../../custom-fetch'

/**
 * Retorna a lista de op√ß√µes v√°lidas de etnia para autodeclara√ß√£o. Esta lista √© usada para validar as atualiza√ß√µes de etnia autodeclarada.
 * @summary Listar op√ß√µes de etnia
 */
export type getCitizenEthnicityOptionsResponse200 = {
  data: string[]
  status: 200
}

export type getCitizenEthnicityOptionsResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type getCitizenEthnicityOptionsResponseComposite =
  | getCitizenEthnicityOptionsResponse200
  | getCitizenEthnicityOptionsResponse500

export type getCitizenEthnicityOptionsResponse =
  getCitizenEthnicityOptionsResponseComposite & {
    headers: Headers
  }

export const getGetCitizenEthnicityOptionsUrl = () => {
  return `/citizen/ethnicity/options`
}

export const getCitizenEthnicityOptions = async (
  options?: RequestInit
): Promise<getCitizenEthnicityOptionsResponse> => {
  return customFetch<getCitizenEthnicityOptionsResponse>(
    getGetCitizenEthnicityOptionsUrl(),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Recupera os dados do cidad√£o por CPF, incluindo informa√ß√µes b√°sicas e dados autodeclarados.
 * @summary Obter dados do cidad√£o
 */
export type getCitizenCpfResponse200 = {
  data: ModelsCitizen
  status: 200
}

export type getCitizenCpfResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type getCitizenCpfResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type getCitizenCpfResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type getCitizenCpfResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getCitizenCpfResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type getCitizenCpfResponseComposite =
  | getCitizenCpfResponse200
  | getCitizenCpfResponse400
  | getCitizenCpfResponse401
  | getCitizenCpfResponse403
  | getCitizenCpfResponse404
  | getCitizenCpfResponse429
  | getCitizenCpfResponse500

export type getCitizenCpfResponse = getCitizenCpfResponseComposite & {
  headers: Headers
}

export const getGetCitizenCpfUrl = (cpf: string) => {
  return `/citizen/${cpf}`
}

export const getCitizenCpf = async (
  cpf: string,
  options?: RequestInit
): Promise<getCitizenCpfResponse> => {
  return customFetch<getCitizenCpfResponse>(getGetCitizenCpfUrl(cpf), {
    ...options,
    method: 'GET',
  })
}

/**
 * Atualiza ou cria o endere√ßo autodeclarado de um cidad√£o por CPF. Apenas o campo de endere√ßo √© atualizado.
 * @summary Atualizar endere√ßo autodeclarado
 */
export type putCitizenCpfAddressResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type putCitizenCpfAddressResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfAddressResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type putCitizenCpfAddressResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type putCitizenCpfAddressResponse409 = {
  data: HandlersErrorResponse
  status: 409
}

export type putCitizenCpfAddressResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type putCitizenCpfAddressResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type putCitizenCpfAddressResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type putCitizenCpfAddressResponseComposite =
  | putCitizenCpfAddressResponse200
  | putCitizenCpfAddressResponse400
  | putCitizenCpfAddressResponse401
  | putCitizenCpfAddressResponse403
  | putCitizenCpfAddressResponse409
  | putCitizenCpfAddressResponse422
  | putCitizenCpfAddressResponse429
  | putCitizenCpfAddressResponse500

export type putCitizenCpfAddressResponse =
  putCitizenCpfAddressResponseComposite & {
    headers: Headers
  }

export const getPutCitizenCpfAddressUrl = (cpf: string) => {
  return `/citizen/${cpf}/address`
}

export const putCitizenCpfAddress = async (
  cpf: string,
  modelsSelfDeclaredAddressInput: ModelsSelfDeclaredAddressInput,
  options?: RequestInit
): Promise<putCitizenCpfAddressResponse> => {
  return customFetch<putCitizenCpfAddressResponse>(
    getPutCitizenCpfAddressUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSelfDeclaredAddressInput),
    }
  )
}

/**
 * Atualiza ou cria o email autodeclarado de um cidad√£o por CPF. Apenas o campo de email √© atualizado.
 * @summary Atualizar email autodeclarado
 */
export type putCitizenCpfEmailResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type putCitizenCpfEmailResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfEmailResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type putCitizenCpfEmailResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type putCitizenCpfEmailResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type putCitizenCpfEmailResponse409 = {
  data: HandlersErrorResponse
  status: 409
}

export type putCitizenCpfEmailResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type putCitizenCpfEmailResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type putCitizenCpfEmailResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type putCitizenCpfEmailResponseComposite =
  | putCitizenCpfEmailResponse200
  | putCitizenCpfEmailResponse400
  | putCitizenCpfEmailResponse401
  | putCitizenCpfEmailResponse403
  | putCitizenCpfEmailResponse404
  | putCitizenCpfEmailResponse409
  | putCitizenCpfEmailResponse422
  | putCitizenCpfEmailResponse429
  | putCitizenCpfEmailResponse500

export type putCitizenCpfEmailResponse = putCitizenCpfEmailResponseComposite & {
  headers: Headers
}

export const getPutCitizenCpfEmailUrl = (cpf: string) => {
  return `/citizen/${cpf}/email`
}

export const putCitizenCpfEmail = async (
  cpf: string,
  modelsSelfDeclaredEmailInput: ModelsSelfDeclaredEmailInput,
  options?: RequestInit
): Promise<putCitizenCpfEmailResponse> => {
  return customFetch<putCitizenCpfEmailResponse>(
    getPutCitizenCpfEmailUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSelfDeclaredEmailInput),
    }
  )
}

/**
 * Atualiza ou cria a etnia autodeclarada de um cidad√£o por CPF. Apenas o campo de etnia √© atualizado. O valor deve ser uma das op√ß√µes v√°lidas retornadas pelo endpoint /citizen/ethnicity/options.
 * @summary Atualizar etnia autodeclarada
 */
export type putCitizenCpfEthnicityResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type putCitizenCpfEthnicityResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfEthnicityResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type putCitizenCpfEthnicityResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type putCitizenCpfEthnicityResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type putCitizenCpfEthnicityResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type putCitizenCpfEthnicityResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type putCitizenCpfEthnicityResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type putCitizenCpfEthnicityResponseComposite =
  | putCitizenCpfEthnicityResponse200
  | putCitizenCpfEthnicityResponse400
  | putCitizenCpfEthnicityResponse401
  | putCitizenCpfEthnicityResponse403
  | putCitizenCpfEthnicityResponse404
  | putCitizenCpfEthnicityResponse422
  | putCitizenCpfEthnicityResponse429
  | putCitizenCpfEthnicityResponse500

export type putCitizenCpfEthnicityResponse =
  putCitizenCpfEthnicityResponseComposite & {
    headers: Headers
  }

export const getPutCitizenCpfEthnicityUrl = (cpf: string) => {
  return `/citizen/${cpf}/ethnicity`
}

export const putCitizenCpfEthnicity = async (
  cpf: string,
  modelsSelfDeclaredRacaInput: ModelsSelfDeclaredRacaInput,
  options?: RequestInit
): Promise<putCitizenCpfEthnicityResponse> => {
  return customFetch<putCitizenCpfEthnicityResponse>(
    getPutCitizenCpfEthnicityUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSelfDeclaredRacaInput),
    }
  )
}

/**
 * Atualiza ou cria o nome de exibi√ß√£o autodeclarado de um cidad√£o por CPF. Apenas o campo de nome de exibi√ß√£o √© atualizado. O nome de exibi√ß√£o √© o nome que aparece na interface do usu√°rio, permitindo ao cidad√£o controlar como seu nome √© exibido no aplicativo.
 * @summary Atualizar nome de exibi√ß√£o autodeclarado
 */
export type putCitizenCpfExhibitionNameResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type putCitizenCpfExhibitionNameResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfExhibitionNameResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type putCitizenCpfExhibitionNameResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type putCitizenCpfExhibitionNameResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type putCitizenCpfExhibitionNameResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type putCitizenCpfExhibitionNameResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type putCitizenCpfExhibitionNameResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type putCitizenCpfExhibitionNameResponseComposite =
  | putCitizenCpfExhibitionNameResponse200
  | putCitizenCpfExhibitionNameResponse400
  | putCitizenCpfExhibitionNameResponse401
  | putCitizenCpfExhibitionNameResponse403
  | putCitizenCpfExhibitionNameResponse404
  | putCitizenCpfExhibitionNameResponse422
  | putCitizenCpfExhibitionNameResponse429
  | putCitizenCpfExhibitionNameResponse500

export type putCitizenCpfExhibitionNameResponse =
  putCitizenCpfExhibitionNameResponseComposite & {
    headers: Headers
  }

export const getPutCitizenCpfExhibitionNameUrl = (cpf: string) => {
  return `/citizen/${cpf}/exhibition-name`
}

export const putCitizenCpfExhibitionName = async (
  cpf: string,
  modelsSelfDeclaredNomeExibicaoInput: ModelsSelfDeclaredNomeExibicaoInput,
  options?: RequestInit
): Promise<putCitizenCpfExhibitionNameResponse> => {
  return customFetch<putCitizenCpfExhibitionNameResponse>(
    getPutCitizenCpfExhibitionNameUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSelfDeclaredNomeExibicaoInput),
    }
  )
}

/**
 * Verifica se este √© o primeiro login do usu√°rio
 * @summary Obter status do primeiro login
 */
export type getCitizenCpfFirstloginResponse200 = {
  data: ModelsUserConfigResponse
  status: 200
}

export type getCitizenCpfFirstloginResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfFirstloginResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type getCitizenCpfFirstloginResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type getCitizenCpfFirstloginResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getCitizenCpfFirstloginResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type getCitizenCpfFirstloginResponseComposite =
  | getCitizenCpfFirstloginResponse200
  | getCitizenCpfFirstloginResponse400
  | getCitizenCpfFirstloginResponse401
  | getCitizenCpfFirstloginResponse403
  | getCitizenCpfFirstloginResponse429
  | getCitizenCpfFirstloginResponse500

export type getCitizenCpfFirstloginResponse =
  getCitizenCpfFirstloginResponseComposite & {
    headers: Headers
  }

export const getGetCitizenCpfFirstloginUrl = (cpf: string) => {
  return `/citizen/${cpf}/firstlogin`
}

export const getCitizenCpfFirstlogin = async (
  cpf: string,
  options?: RequestInit
): Promise<getCitizenCpfFirstloginResponse> => {
  return customFetch<getCitizenCpfFirstloginResponse>(
    getGetCitizenCpfFirstloginUrl(cpf),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Define o status do primeiro login como falso para um usu√°rio
 * @summary Atualizar status do primeiro login
 */
export type putCitizenCpfFirstloginResponse200 = {
  data: ModelsUserConfigResponse
  status: 200
}

export type putCitizenCpfFirstloginResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfFirstloginResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type putCitizenCpfFirstloginResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type putCitizenCpfFirstloginResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type putCitizenCpfFirstloginResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type putCitizenCpfFirstloginResponseComposite =
  | putCitizenCpfFirstloginResponse200
  | putCitizenCpfFirstloginResponse400
  | putCitizenCpfFirstloginResponse401
  | putCitizenCpfFirstloginResponse403
  | putCitizenCpfFirstloginResponse429
  | putCitizenCpfFirstloginResponse500

export type putCitizenCpfFirstloginResponse =
  putCitizenCpfFirstloginResponseComposite & {
    headers: Headers
  }

export const getPutCitizenCpfFirstloginUrl = (cpf: string) => {
  return `/citizen/${cpf}/firstlogin`
}

export const putCitizenCpfFirstlogin = async (
  cpf: string,
  options?: RequestInit
): Promise<putCitizenCpfFirstloginResponse> => {
  return customFetch<putCitizenCpfFirstloginResponse>(
    getPutCitizenCpfFirstloginUrl(cpf),
    {
      ...options,
      method: 'PUT',
    }
  )
}

/**
 * Recupera a lista paginada de entidades jur√≠dicas (pessoas jur√≠dicas) associadas ao CPF do cidad√£o. A busca √© feita atrav√©s do campo 'cpf_socio' no array 'socios' de cada entidade.
 * @summary Obter entidades jur√≠dicas associadas ao CPF
 */
export type getCitizenCpfLegalEntitiesResponse200 = {
  data: ModelsPaginatedLegalEntities
  status: 200
}

export type getCitizenCpfLegalEntitiesResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfLegalEntitiesResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type getCitizenCpfLegalEntitiesResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type getCitizenCpfLegalEntitiesResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getCitizenCpfLegalEntitiesResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type getCitizenCpfLegalEntitiesResponseComposite =
  | getCitizenCpfLegalEntitiesResponse200
  | getCitizenCpfLegalEntitiesResponse400
  | getCitizenCpfLegalEntitiesResponse401
  | getCitizenCpfLegalEntitiesResponse403
  | getCitizenCpfLegalEntitiesResponse429
  | getCitizenCpfLegalEntitiesResponse500

export type getCitizenCpfLegalEntitiesResponse =
  getCitizenCpfLegalEntitiesResponseComposite & {
    headers: Headers
  }

export const getGetCitizenCpfLegalEntitiesUrl = (
  cpf: string,
  params?: GetCitizenCpfLegalEntitiesParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/citizen/${cpf}/legal-entities?${stringifiedParams}`
    : `/citizen/${cpf}/legal-entities`
}

export const getCitizenCpfLegalEntities = async (
  cpf: string,
  params?: GetCitizenCpfLegalEntitiesParams,
  options?: RequestInit
): Promise<getCitizenCpfLegalEntitiesResponse> => {
  return customFetch<getCitizenCpfLegalEntitiesResponse>(
    getGetCitizenCpfLegalEntitiesUrl(cpf, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Recupera os chamados do 1746 de um cidad√£o por CPF com pagina√ß√£o. Cada documento representa um chamado individual.
 * @summary Obter chamados do 1746 do cidad√£o
 */
export type getCitizenCpfMaintenanceRequestResponse200 = {
  data: ModelsPaginatedMaintenanceRequests
  status: 200
}

export type getCitizenCpfMaintenanceRequestResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfMaintenanceRequestResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type getCitizenCpfMaintenanceRequestResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type getCitizenCpfMaintenanceRequestResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getCitizenCpfMaintenanceRequestResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type getCitizenCpfMaintenanceRequestResponseComposite =
  | getCitizenCpfMaintenanceRequestResponse200
  | getCitizenCpfMaintenanceRequestResponse400
  | getCitizenCpfMaintenanceRequestResponse401
  | getCitizenCpfMaintenanceRequestResponse403
  | getCitizenCpfMaintenanceRequestResponse429
  | getCitizenCpfMaintenanceRequestResponse500

export type getCitizenCpfMaintenanceRequestResponse =
  getCitizenCpfMaintenanceRequestResponseComposite & {
    headers: Headers
  }

export const getGetCitizenCpfMaintenanceRequestUrl = (
  cpf: string,
  params?: GetCitizenCpfMaintenanceRequestParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/citizen/${cpf}/maintenance-request?${stringifiedParams}`
    : `/citizen/${cpf}/maintenance-request`
}

export const getCitizenCpfMaintenanceRequest = async (
  cpf: string,
  params?: GetCitizenCpfMaintenanceRequestParams,
  options?: RequestInit
): Promise<getCitizenCpfMaintenanceRequestResponse> => {
  return customFetch<getCitizenCpfMaintenanceRequestResponse>(
    getGetCitizenCpfMaintenanceRequestUrl(cpf, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Verifica se o usu√°rio optou por receber notifica√ß√µes
 * @summary Obter status de opt-in
 */
export type getCitizenCpfOptinResponse200 = {
  data: ModelsUserConfigOptInResponse
  status: 200
}

export type getCitizenCpfOptinResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfOptinResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type getCitizenCpfOptinResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type getCitizenCpfOptinResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getCitizenCpfOptinResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type getCitizenCpfOptinResponseComposite =
  | getCitizenCpfOptinResponse200
  | getCitizenCpfOptinResponse400
  | getCitizenCpfOptinResponse401
  | getCitizenCpfOptinResponse403
  | getCitizenCpfOptinResponse429
  | getCitizenCpfOptinResponse500

export type getCitizenCpfOptinResponse = getCitizenCpfOptinResponseComposite & {
  headers: Headers
}

export const getGetCitizenCpfOptinUrl = (cpf: string) => {
  return `/citizen/${cpf}/optin`
}

export const getCitizenCpfOptin = async (
  cpf: string,
  options?: RequestInit
): Promise<getCitizenCpfOptinResponse> => {
  return customFetch<getCitizenCpfOptinResponse>(
    getGetCitizenCpfOptinUrl(cpf),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Atualiza o status de opt-in do usu√°rio para notifica√ß√µes
 * @summary Atualizar status de opt-in
 */
export type putCitizenCpfOptinResponse200 = {
  data: ModelsUserConfigOptInResponse
  status: 200
}

export type putCitizenCpfOptinResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfOptinResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type putCitizenCpfOptinResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type putCitizenCpfOptinResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type putCitizenCpfOptinResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type putCitizenCpfOptinResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type putCitizenCpfOptinResponseComposite =
  | putCitizenCpfOptinResponse200
  | putCitizenCpfOptinResponse400
  | putCitizenCpfOptinResponse401
  | putCitizenCpfOptinResponse403
  | putCitizenCpfOptinResponse422
  | putCitizenCpfOptinResponse429
  | putCitizenCpfOptinResponse500

export type putCitizenCpfOptinResponse = putCitizenCpfOptinResponseComposite & {
  headers: Headers
}

export const getPutCitizenCpfOptinUrl = (cpf: string) => {
  return `/citizen/${cpf}/optin`
}

export const putCitizenCpfOptin = async (
  cpf: string,
  modelsUserConfigOptInResponse: ModelsUserConfigOptInResponse,
  options?: RequestInit
): Promise<putCitizenCpfOptinResponse> => {
  return customFetch<putCitizenCpfOptinResponse>(
    getPutCitizenCpfOptinUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsUserConfigOptInResponse),
    }
  )
}

/**
 * Recupera a lista paginada de pets associados ao CPF do cidad√£o.
 * @summary Obter pets associados ao CPF
 */
export type getCitizenCpfPetsResponse200 = {
  data: ModelsPaginatedPets
  status: 200
}

export type getCitizenCpfPetsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfPetsResponseComposite =
  | getCitizenCpfPetsResponse200
  | getCitizenCpfPetsResponse400

export type getCitizenCpfPetsResponse = getCitizenCpfPetsResponseComposite & {
  headers: Headers
}

export const getGetCitizenCpfPetsUrl = (
  cpf: string,
  params?: GetCitizenCpfPetsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/citizen/${cpf}/pets?${stringifiedParams}`
    : `/citizen/${cpf}/pets`
}

export const getCitizenCpfPets = async (
  cpf: string,
  params?: GetCitizenCpfPetsParams,
  options?: RequestInit
): Promise<getCitizenCpfPetsResponse> => {
  return customFetch<getCitizenCpfPetsResponse>(
    getGetCitizenCpfPetsUrl(cpf, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Recupera informa√ß√µes da cl√≠nica credenciada associada aos pets do cidad√£o.
 * @summary Obter dados da cl√≠nica credenciada para pets do CPF
 */
export type getCitizenCpfPetsClinicResponse200 = {
  data: ModelsPetClinicResponse
  status: 200
}

export type getCitizenCpfPetsClinicResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfPetsClinicResponseComposite =
  | getCitizenCpfPetsClinicResponse200
  | getCitizenCpfPetsClinicResponse400

export type getCitizenCpfPetsClinicResponse =
  getCitizenCpfPetsClinicResponseComposite & {
    headers: Headers
  }

export const getGetCitizenCpfPetsClinicUrl = (cpf: string) => {
  return `/citizen/${cpf}/pets/clinic`
}

export const getCitizenCpfPetsClinic = async (
  cpf: string,
  options?: RequestInit
): Promise<getCitizenCpfPetsClinicResponse> => {
  return customFetch<getCitizenCpfPetsClinicResponse>(
    getGetCitizenCpfPetsClinicUrl(cpf),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Recupera as estat√≠sticas de quantidade de pets por tipo associadas ao CPF do cidad√£o.
 * @summary Obter estat√≠sticas de pets do CPF
 */
export type getCitizenCpfPetsStatsResponse200 = {
  data: ModelsPetStatsResponse
  status: 200
}

export type getCitizenCpfPetsStatsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfPetsStatsResponseComposite =
  | getCitizenCpfPetsStatsResponse200
  | getCitizenCpfPetsStatsResponse400

export type getCitizenCpfPetsStatsResponse =
  getCitizenCpfPetsStatsResponseComposite & {
    headers: Headers
  }

export const getGetCitizenCpfPetsStatsUrl = (cpf: string) => {
  return `/citizen/${cpf}/pets/stats`
}

export const getCitizenCpfPetsStats = async (
  cpf: string,
  options?: RequestInit
): Promise<getCitizenCpfPetsStatsResponse> => {
  return customFetch<getCitizenCpfPetsStatsResponse>(
    getGetCitizenCpfPetsStatsUrl(cpf),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Recupera um pet espec√≠fico associado ao CPF do cidad√£o pelo ID do pet.
 * @summary Obter pet espec√≠fico por ID
 */
export type getCitizenCpfPetsPetIdResponse200 = {
  data: ModelsPet
  status: 200
}

export type getCitizenCpfPetsPetIdResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfPetsPetIdResponseComposite =
  | getCitizenCpfPetsPetIdResponse200
  | getCitizenCpfPetsPetIdResponse400

export type getCitizenCpfPetsPetIdResponse =
  getCitizenCpfPetsPetIdResponseComposite & {
    headers: Headers
  }

export const getGetCitizenCpfPetsPetIdUrl = (cpf: string, petId: number) => {
  return `/citizen/${cpf}/pets/${petId}`
}

export const getCitizenCpfPetsPetId = async (
  cpf: string,
  petId: number,
  options?: RequestInit
): Promise<getCitizenCpfPetsPetIdResponse> => {
  return customFetch<getCitizenCpfPetsPetIdResponse>(
    getGetCitizenCpfPetsPetIdUrl(cpf, petId),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Atualiza ou cria o telefone autodeclarado de um cidad√£o por CPF. Apenas o campo de telefone √© atualizado (armazenado como pendente at√© verificado).
 * @summary Atualizar telefone autodeclarado
 */
export type putCitizenCpfPhoneResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type putCitizenCpfPhoneResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfPhoneResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type putCitizenCpfPhoneResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type putCitizenCpfPhoneResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type putCitizenCpfPhoneResponse409 = {
  data: HandlersErrorResponse
  status: 409
}

export type putCitizenCpfPhoneResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type putCitizenCpfPhoneResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type putCitizenCpfPhoneResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type putCitizenCpfPhoneResponseComposite =
  | putCitizenCpfPhoneResponse200
  | putCitizenCpfPhoneResponse400
  | putCitizenCpfPhoneResponse401
  | putCitizenCpfPhoneResponse403
  | putCitizenCpfPhoneResponse404
  | putCitizenCpfPhoneResponse409
  | putCitizenCpfPhoneResponse422
  | putCitizenCpfPhoneResponse429
  | putCitizenCpfPhoneResponse500

export type putCitizenCpfPhoneResponse = putCitizenCpfPhoneResponseComposite & {
  headers: Headers
}

export const getPutCitizenCpfPhoneUrl = (cpf: string) => {
  return `/citizen/${cpf}/phone`
}

export const putCitizenCpfPhone = async (
  cpf: string,
  modelsSelfDeclaredPhoneInput: ModelsSelfDeclaredPhoneInput,
  options?: RequestInit
): Promise<putCitizenCpfPhoneResponse> => {
  return customFetch<putCitizenCpfPhoneResponse>(
    getPutCitizenCpfPhoneUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSelfDeclaredPhoneInput),
    }
  )
}

/**
 * Valida o c√≥digo de verifica√ß√£o enviado para o n√∫mero de telefone
 * @summary Validar verifica√ß√£o de telefone
 */
export type postCitizenCpfPhoneValidateResponse200 = {
  data: HandlersSuccessResponse
  status: 200
}

export type postCitizenCpfPhoneValidateResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postCitizenCpfPhoneValidateResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type postCitizenCpfPhoneValidateResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type postCitizenCpfPhoneValidateResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type postCitizenCpfPhoneValidateResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type postCitizenCpfPhoneValidateResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type postCitizenCpfPhoneValidateResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type postCitizenCpfPhoneValidateResponseComposite =
  | postCitizenCpfPhoneValidateResponse200
  | postCitizenCpfPhoneValidateResponse400
  | postCitizenCpfPhoneValidateResponse401
  | postCitizenCpfPhoneValidateResponse403
  | postCitizenCpfPhoneValidateResponse404
  | postCitizenCpfPhoneValidateResponse422
  | postCitizenCpfPhoneValidateResponse429
  | postCitizenCpfPhoneValidateResponse500

export type postCitizenCpfPhoneValidateResponse =
  postCitizenCpfPhoneValidateResponseComposite & {
    headers: Headers
  }

export const getPostCitizenCpfPhoneValidateUrl = (cpf: string) => {
  return `/citizen/${cpf}/phone/validate`
}

export const postCitizenCpfPhoneValidate = async (
  cpf: string,
  modelsPhoneVerificationValidateRequest: ModelsPhoneVerificationValidateRequest,
  options?: RequestInit
): Promise<postCitizenCpfPhoneValidateResponse> => {
  return customFetch<postCitizenCpfPhoneValidateResponse>(
    getPostCitizenCpfPhoneValidateUrl(cpf),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsPhoneVerificationValidateRequest),
    }
  )
}

/**
 * Recupera os dados da carteira do cidad√£o por CPF, incluindo informa√ß√µes de sa√∫de e outros dados da carteira.
 * @summary Obter dados da carteira do cidad√£o
 */
export type getCitizenCpfWalletResponse200 = {
  data: ModelsCitizenWallet
  status: 200
}

export type getCitizenCpfWalletResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfWalletResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type getCitizenCpfWalletResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type getCitizenCpfWalletResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type getCitizenCpfWalletResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getCitizenCpfWalletResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type getCitizenCpfWalletResponseComposite =
  | getCitizenCpfWalletResponse200
  | getCitizenCpfWalletResponse400
  | getCitizenCpfWalletResponse401
  | getCitizenCpfWalletResponse403
  | getCitizenCpfWalletResponse404
  | getCitizenCpfWalletResponse429
  | getCitizenCpfWalletResponse500

export type getCitizenCpfWalletResponse =
  getCitizenCpfWalletResponseComposite & {
    headers: Headers
  }

export const getGetCitizenCpfWalletUrl = (cpf: string) => {
  return `/citizen/${cpf}/wallet`
}

export const getCitizenCpfWallet = async (
  cpf: string,
  options?: RequestInit
): Promise<getCitizenCpfWalletResponse> => {
  return customFetch<getCitizenCpfWalletResponse>(
    getGetCitizenCpfWalletUrl(cpf),
    {
      ...options,
      method: 'GET',
    }
  )
}
