/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * API RMI
 * API para gerenciamento de dados de cidadãos do Rio de Janeiro, incluindo autodeclaração de informações e verificação de contato.
 * OpenAPI spec version: 1.0
 */
import type {
  GetV1AvatarsParams,
  HandlersErrorResponse,
  ModelsAvatarRequest,
  ModelsAvatarResponse,
  ModelsAvatarsListResponse,
  ModelsUserAvatarRequest,
  ModelsUserAvatarResponse,
} from '.././models'

import { customFetch } from '../../../custom-fetch'

/**
 * Get paginated list of available profile picture avatars
 * @summary List available avatars
 */
export type getV1AvatarsResponse200 = {
  data: ModelsAvatarsListResponse
  status: 200
}

export type getV1AvatarsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getV1AvatarsResponseComposite =
  | getV1AvatarsResponse200
  | getV1AvatarsResponse400

export type getV1AvatarsResponse = getV1AvatarsResponseComposite & {
  headers: Headers
}

export const getGetV1AvatarsUrl = (params?: GetV1AvatarsParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/avatars?${stringifiedParams}`
    : `/avatars`
}

export const getV1Avatars = async (
  params?: GetV1AvatarsParams,
  options?: RequestInit
): Promise<getV1AvatarsResponse> => {
  return customFetch<getV1AvatarsResponse>(getGetV1AvatarsUrl(params), {
    ...options,
    method: 'GET',
  })
}

/**
 * Create a new profile picture avatar (admin only)
 * @summary Create a new avatar
 */
export type postV1AvatarsResponse201 = {
  data: ModelsAvatarResponse
  status: 201
}

export type postV1AvatarsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postV1AvatarsResponseComposite =
  | postV1AvatarsResponse201
  | postV1AvatarsResponse400

export type postV1AvatarsResponse = postV1AvatarsResponseComposite & {
  headers: Headers
}

export const getPostV1AvatarsUrl = () => {
  return `/avatars`
}

export const postV1Avatars = async (
  modelsAvatarRequest: ModelsAvatarRequest,
  options?: RequestInit
): Promise<postV1AvatarsResponse> => {
  return customFetch<postV1AvatarsResponse>(getPostV1AvatarsUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(modelsAvatarRequest),
  })
}

/**
 * Soft delete a profile picture avatar (admin only)
 * @summary Delete an avatar
 */
export type deleteV1AvatarsIdResponse204 = {
  data: void
  status: 204
}

export type deleteV1AvatarsIdResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type deleteV1AvatarsIdResponseComposite =
  | deleteV1AvatarsIdResponse204
  | deleteV1AvatarsIdResponse400

export type deleteV1AvatarsIdResponse = deleteV1AvatarsIdResponseComposite & {
  headers: Headers
}

export const getDeleteV1AvatarsIdUrl = (id: string) => {
  return `/avatars/${id}`
}

export const deleteV1AvatarsId = async (
  id: string,
  options?: RequestInit
): Promise<deleteV1AvatarsIdResponse> => {
  return customFetch<deleteV1AvatarsIdResponse>(getDeleteV1AvatarsIdUrl(id), {
    ...options,
    method: 'DELETE',
  })
}

/**
 * Get the current profile picture avatar for a user
 * @summary Get user's current avatar
 */
export type getV1CitizenCpfAvatarResponse200 = {
  data: ModelsUserAvatarResponse
  status: 200
}

export type getV1CitizenCpfAvatarResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getV1CitizenCpfAvatarResponseComposite =
  | getV1CitizenCpfAvatarResponse200
  | getV1CitizenCpfAvatarResponse400

export type getV1CitizenCpfAvatarResponse =
  getV1CitizenCpfAvatarResponseComposite & {
    headers: Headers
  }

export const getGetV1CitizenCpfAvatarUrl = (cpf: string) => {
  return `/citizen/${cpf}/avatar`
}

export const getV1CitizenCpfAvatar = async (
  cpf: string,
  options?: RequestInit
): Promise<getV1CitizenCpfAvatarResponse> => {
  return customFetch<getV1CitizenCpfAvatarResponse>(
    getGetV1CitizenCpfAvatarUrl(cpf),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Set or change the profile picture avatar for a user
 * @summary Update user's avatar
 */
export type putV1CitizenCpfAvatarResponse200 = {
  data: ModelsUserAvatarResponse
  status: 200
}

export type putV1CitizenCpfAvatarResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putV1CitizenCpfAvatarResponseComposite =
  | putV1CitizenCpfAvatarResponse200
  | putV1CitizenCpfAvatarResponse400

export type putV1CitizenCpfAvatarResponse =
  putV1CitizenCpfAvatarResponseComposite & {
    headers: Headers
  }

export const getPutV1CitizenCpfAvatarUrl = (cpf: string) => {
  return `/citizen/${cpf}/avatar`
}

export const putV1CitizenCpfAvatar = async (
  cpf: string,
  modelsUserAvatarRequest: ModelsUserAvatarRequest,
  options?: RequestInit
): Promise<putV1CitizenCpfAvatarResponse> => {
  return customFetch<putV1CitizenCpfAvatarResponse>(
    getPutV1CitizenCpfAvatarUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsUserAvatarRequest),
    }
  )
}
