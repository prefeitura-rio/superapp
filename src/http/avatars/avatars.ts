/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * API RMI
 * API para gerenciamento de dados de cidadãos do Rio de Janeiro, incluindo autodeclaração de informações e verificação de contato.
 * OpenAPI spec version: 1.0
 */
import type {
  GetAvatarsParams,
  HandlersErrorResponse,
  ModelsAvatarRequest,
  ModelsAvatarResponse,
  ModelsAvatarsListResponse,
  ModelsUserAvatarRequest,
  ModelsUserAvatarResponse,
} from '.././models'

import { customFetch } from '../../../custom-fetch'

/**
 * Obtém lista paginada de avatares de foto de perfil disponíveis
 * @summary Listar avatares disponíveis
 */
export type getAvatarsResponse200 = {
  data: ModelsAvatarsListResponse
  status: 200
}

export type getAvatarsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getAvatarsResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getAvatarsResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type getAvatarsResponseComposite =
  | getAvatarsResponse200
  | getAvatarsResponse400
  | getAvatarsResponse429
  | getAvatarsResponse500

export type getAvatarsResponse = getAvatarsResponseComposite & {
  headers: Headers
}

export const getGetAvatarsUrl = (params?: GetAvatarsParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/avatars?${stringifiedParams}`
    : `/avatars`
}

export const getAvatars = async (
  params?: GetAvatarsParams,
  options?: RequestInit
): Promise<getAvatarsResponse> => {
  return customFetch<getAvatarsResponse>(getGetAvatarsUrl(params), {
    ...options,
    method: 'GET',
  })
}

/**
 * Cria um novo avatar de foto de perfil (somente administradores)
 * @summary Criar novo avatar
 */
export type postAvatarsResponse201 = {
  data: ModelsAvatarResponse
  status: 201
}

export type postAvatarsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postAvatarsResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type postAvatarsResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type postAvatarsResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type postAvatarsResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type postAvatarsResponseComposite =
  | postAvatarsResponse201
  | postAvatarsResponse400
  | postAvatarsResponse401
  | postAvatarsResponse403
  | postAvatarsResponse429
  | postAvatarsResponse500

export type postAvatarsResponse = postAvatarsResponseComposite & {
  headers: Headers
}

export const getPostAvatarsUrl = () => {
  return `/avatars`
}

export const postAvatars = async (
  modelsAvatarRequest: ModelsAvatarRequest,
  options?: RequestInit
): Promise<postAvatarsResponse> => {
  return customFetch<postAvatarsResponse>(getPostAvatarsUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(modelsAvatarRequest),
  })
}

/**
 * Exclui um avatar de foto de perfil (exclusão suave, somente administradores)
 * @summary Excluir avatar
 */
export type deleteAvatarsIdResponse204 = {
  data: null
  status: 204
}

export type deleteAvatarsIdResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type deleteAvatarsIdResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type deleteAvatarsIdResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type deleteAvatarsIdResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type deleteAvatarsIdResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type deleteAvatarsIdResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type deleteAvatarsIdResponseComposite =
  | deleteAvatarsIdResponse204
  | deleteAvatarsIdResponse400
  | deleteAvatarsIdResponse401
  | deleteAvatarsIdResponse403
  | deleteAvatarsIdResponse404
  | deleteAvatarsIdResponse429
  | deleteAvatarsIdResponse500

export type deleteAvatarsIdResponse = deleteAvatarsIdResponseComposite & {
  headers: Headers
}

export const getDeleteAvatarsIdUrl = (id: string) => {
  return `/avatars/${id}`
}

export const deleteAvatarsId = async (
  id: string,
  options?: RequestInit
): Promise<deleteAvatarsIdResponse> => {
  return customFetch<deleteAvatarsIdResponse>(getDeleteAvatarsIdUrl(id), {
    ...options,
    method: 'DELETE',
  })
}

/**
 * Obtém o avatar de foto de perfil atual de um usuário
 * @summary Obter avatar atual do usuário
 */
export type getCitizenCpfAvatarResponse200 = {
  data: ModelsUserAvatarResponse
  status: 200
}

export type getCitizenCpfAvatarResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getCitizenCpfAvatarResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type getCitizenCpfAvatarResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type getCitizenCpfAvatarResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type getCitizenCpfAvatarResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getCitizenCpfAvatarResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type getCitizenCpfAvatarResponseComposite =
  | getCitizenCpfAvatarResponse200
  | getCitizenCpfAvatarResponse400
  | getCitizenCpfAvatarResponse401
  | getCitizenCpfAvatarResponse403
  | getCitizenCpfAvatarResponse404
  | getCitizenCpfAvatarResponse429
  | getCitizenCpfAvatarResponse500

export type getCitizenCpfAvatarResponse =
  getCitizenCpfAvatarResponseComposite & {
    headers: Headers
  }

export const getGetCitizenCpfAvatarUrl = (cpf: string) => {
  return `/citizen/${cpf}/avatar`
}

export const getCitizenCpfAvatar = async (
  cpf: string,
  options?: RequestInit
): Promise<getCitizenCpfAvatarResponse> => {
  return customFetch<getCitizenCpfAvatarResponse>(
    getGetCitizenCpfAvatarUrl(cpf),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Define ou altera o avatar de foto de perfil de um usuário
 * @summary Atualizar avatar do usuário
 */
export type putCitizenCpfAvatarResponse200 = {
  data: ModelsUserAvatarResponse
  status: 200
}

export type putCitizenCpfAvatarResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putCitizenCpfAvatarResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type putCitizenCpfAvatarResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type putCitizenCpfAvatarResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type putCitizenCpfAvatarResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type putCitizenCpfAvatarResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type putCitizenCpfAvatarResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type putCitizenCpfAvatarResponseComposite =
  | putCitizenCpfAvatarResponse200
  | putCitizenCpfAvatarResponse400
  | putCitizenCpfAvatarResponse401
  | putCitizenCpfAvatarResponse403
  | putCitizenCpfAvatarResponse404
  | putCitizenCpfAvatarResponse422
  | putCitizenCpfAvatarResponse429
  | putCitizenCpfAvatarResponse500

export type putCitizenCpfAvatarResponse =
  putCitizenCpfAvatarResponseComposite & {
    headers: Headers
  }

export const getPutCitizenCpfAvatarUrl = (cpf: string) => {
  return `/citizen/${cpf}/avatar`
}

export const putCitizenCpfAvatar = async (
  cpf: string,
  modelsUserAvatarRequest: ModelsUserAvatarRequest,
  options?: RequestInit
): Promise<putCitizenCpfAvatarResponse> => {
  return customFetch<putCitizenCpfAvatarResponse>(
    getPutCitizenCpfAvatarUrl(cpf),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsUserAvatarRequest),
    }
  )
}
