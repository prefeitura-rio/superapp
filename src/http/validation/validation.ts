/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * API RMI
 * API para gerenciamento de dados de cidadãos do Rio de Janeiro, incluindo autodeclaração de informações e verificação de contato.
 * OpenAPI spec version: 1.0
 */
import type {
  HandlersEmailValidationRequest,
  HandlersEmailValidationResponse,
  HandlersErrorResponse,
  HandlersPhoneValidationRequest,
  HandlersPhoneValidationResponse
} from '.././models';

import { customFetch } from '../../../custom-fetch';

/**
 * Valida formato e estrutura de endereços de email, retornando informações detalhadas sobre o endereço quando válido.
 * @summary Valida endereço de email
 */
export type postValidateEmailResponse200 = {
  data: HandlersEmailValidationResponse
  status: 200
}

export type postValidateEmailResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postValidateEmailResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type postValidateEmailResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type postValidateEmailResponseComposite = postValidateEmailResponse200 | postValidateEmailResponse400 | postValidateEmailResponse429 | postValidateEmailResponse500;
    
export type postValidateEmailResponse = postValidateEmailResponseComposite & {
  headers: Headers;
}

export const getPostValidateEmailUrl = () => {


  

  return `/validate/email`
}

export const postValidateEmail = async (handlersEmailValidationRequest: HandlersEmailValidationRequest, options?: RequestInit): Promise<postValidateEmailResponse> => {
  
  return customFetch<postValidateEmailResponse>(getPostValidateEmailUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersEmailValidationRequest,)
  }
);}


/**
 * Valida DDI, DDD e número para qualquer telefone internacional.
 * @summary Valida número de telefone
 */
export type postValidatePhoneResponse200 = {
  data: HandlersPhoneValidationResponse
  status: 200
}

export type postValidatePhoneResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postValidatePhoneResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type postValidatePhoneResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type postValidatePhoneResponseComposite = postValidatePhoneResponse200 | postValidatePhoneResponse400 | postValidatePhoneResponse429 | postValidatePhoneResponse500;
    
export type postValidatePhoneResponse = postValidatePhoneResponseComposite & {
  headers: Headers;
}

export const getPostValidatePhoneUrl = () => {


  

  return `/validate/phone`
}

export const postValidatePhone = async (handlersPhoneValidationRequest: HandlersPhoneValidationRequest, options?: RequestInit): Promise<postValidatePhoneResponse> => {
  
  return customFetch<postValidatePhoneResponse>(getPostValidatePhoneUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersPhoneValidationRequest,)
  }
);}


