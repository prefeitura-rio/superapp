/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * API RMI
 * API para gerenciamento de dados de cidadãos do Rio de Janeiro, incluindo autodeclaração de informações e verificação de contato.
 * OpenAPI spec version: 1.0
 */
import type {
  HandlersCacheReadRequest,
  HandlersCacheReadResponse,
  HandlersErrorResponse
} from '.././models';

import { customFetch } from '../../../custom-fetch';

/**
 * Permite aos administradores ler qualquer chave do cache Redis para debug e monitoramento
 * @summary Ler chave arbitrária do cache Redis
 */
export type postAdminCacheReadResponse200 = {
  data: HandlersCacheReadResponse
  status: 200
}

export type postAdminCacheReadResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postAdminCacheReadResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type postAdminCacheReadResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type postAdminCacheReadResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type postAdminCacheReadResponseComposite = postAdminCacheReadResponse200 | postAdminCacheReadResponse400 | postAdminCacheReadResponse401 | postAdminCacheReadResponse403 | postAdminCacheReadResponse500;
    
export type postAdminCacheReadResponse = postAdminCacheReadResponseComposite & {
  headers: Headers;
}

export const getPostAdminCacheReadUrl = () => {


  

  return `/admin/cache/read`
}

export const postAdminCacheRead = async (handlersCacheReadRequest: HandlersCacheReadRequest, options?: RequestInit): Promise<postAdminCacheReadResponse> => {
  
  return customFetch<postAdminCacheReadResponse>(getPostAdminCacheReadUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersCacheReadRequest,)
  }
);}


