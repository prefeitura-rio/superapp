/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * API RMI
 * API para gerenciamento de dados de cidadãos do Rio de Janeiro, incluindo autodeclaração de informações e verificação de contato.
 * OpenAPI spec version: 1.0
 */
import { customFetch } from '../../../custom-fetch'

/**
 * Obtém a lista de canais disponíveis para comunicação
 * @summary Obter canais disponíveis
 */
export type getConfigChannelsResponse200 = {
  data: string[]
  status: 200
}

export type getConfigChannelsResponseComposite = getConfigChannelsResponse200

export type getConfigChannelsResponse = getConfigChannelsResponseComposite & {
  headers: Headers
}

export const getGetConfigChannelsUrl = () => {
  return `/config/channels`
}

export const getConfigChannels = async (
  options?: RequestInit
): Promise<getConfigChannelsResponse> => {
  return customFetch<getConfigChannelsResponse>(getGetConfigChannelsUrl(), {
    ...options,
    method: 'GET',
  })
}

/**
 * Obtém a lista de motivos válidos para opt-out
 * @summary Obter motivos de opt-out
 */
export type getConfigOptOutReasonsResponse200 = {
  data: string[]
  status: 200
}

export type getConfigOptOutReasonsResponseComposite =
  getConfigOptOutReasonsResponse200

export type getConfigOptOutReasonsResponse =
  getConfigOptOutReasonsResponseComposite & {
    headers: Headers
  }

export const getGetConfigOptOutReasonsUrl = () => {
  return `/config/opt-out-reasons`
}

export const getConfigOptOutReasons = async (
  options?: RequestInit
): Promise<getConfigOptOutReasonsResponse> => {
  return customFetch<getConfigOptOutReasonsResponse>(
    getGetConfigOptOutReasonsUrl(),
    {
      ...options,
      method: 'GET',
    }
  )
}
