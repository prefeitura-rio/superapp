/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * API RMI
 * API para gerenciamento de dados de cidad√£os do Rio de Janeiro, incluindo autodeclara√ß√£o de informa√ß√µes e verifica√ß√£o de contato.
 * OpenAPI spec version: 1.0
 */
import type {
  GetAdminPhoneQuarantinedParams,
  HandlersErrorResponse,
  ModelsBindRequest,
  ModelsBindResponse,
  ModelsOptInRequest,
  ModelsOptInResponse,
  ModelsOptOutRequest,
  ModelsOptOutResponse,
  ModelsPhoneCitizenResponse,
  ModelsPhoneStatusResponse,
  ModelsQuarantineResponse,
  ModelsQuarantineStats,
  ModelsQuarantinedListResponse,
  ModelsRejectRegistrationRequest,
  ModelsRejectRegistrationResponse,
  ModelsValidateRegistrationRequest,
  ModelsValidateRegistrationResponse
} from '.././models';

import { customFetch } from '../../../custom-fetch';

/**
 * Obt√©m estat√≠sticas sobre telefones em quarentena (apenas administradores)
 * @summary Obter estat√≠sticas de quarentena
 */
export type getAdminPhoneQuarantineStatsResponse200 = {
  data: ModelsQuarantineStats
  status: 200
}

export type getAdminPhoneQuarantineStatsResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type getAdminPhoneQuarantineStatsResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type getAdminPhoneQuarantineStatsResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getAdminPhoneQuarantineStatsResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type getAdminPhoneQuarantineStatsResponseComposite = getAdminPhoneQuarantineStatsResponse200 | getAdminPhoneQuarantineStatsResponse401 | getAdminPhoneQuarantineStatsResponse403 | getAdminPhoneQuarantineStatsResponse429 | getAdminPhoneQuarantineStatsResponse500;
    
export type getAdminPhoneQuarantineStatsResponse = getAdminPhoneQuarantineStatsResponseComposite & {
  headers: Headers;
}

export const getGetAdminPhoneQuarantineStatsUrl = () => {


  

  return `/admin/phone/quarantine/stats`
}

export const getAdminPhoneQuarantineStats = async ( options?: RequestInit): Promise<getAdminPhoneQuarantineStatsResponse> => {
  
  return customFetch<getAdminPhoneQuarantineStatsResponse>(getGetAdminPhoneQuarantineStatsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Lista todos os telefones em quarentena com pagina√ß√£o (apenas administradores)
 * @summary Listar telefones em quarentena
 */
export type getAdminPhoneQuarantinedResponse200 = {
  data: ModelsQuarantinedListResponse
  status: 200
}

export type getAdminPhoneQuarantinedResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getAdminPhoneQuarantinedResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type getAdminPhoneQuarantinedResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type getAdminPhoneQuarantinedResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getAdminPhoneQuarantinedResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type getAdminPhoneQuarantinedResponseComposite = getAdminPhoneQuarantinedResponse200 | getAdminPhoneQuarantinedResponse400 | getAdminPhoneQuarantinedResponse401 | getAdminPhoneQuarantinedResponse403 | getAdminPhoneQuarantinedResponse429 | getAdminPhoneQuarantinedResponse500;
    
export type getAdminPhoneQuarantinedResponse = getAdminPhoneQuarantinedResponseComposite & {
  headers: Headers;
}

export const getGetAdminPhoneQuarantinedUrl = (params?: GetAdminPhoneQuarantinedParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/admin/phone/quarantined?${stringifiedParams}` : `/admin/phone/quarantined`
}

export const getAdminPhoneQuarantined = async (params?: GetAdminPhoneQuarantinedParams, options?: RequestInit): Promise<getAdminPhoneQuarantinedResponse> => {
  
  return customFetch<getAdminPhoneQuarantinedResponse>(getGetAdminPhoneQuarantinedUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Vincula um n√∫mero de telefone a um CPF sem definir opt-in
 * @summary Vincular telefone a CPF
 */
export type postPhonePhoneNumberBindResponse200 = {
  data: ModelsBindResponse
  status: 200
}

export type postPhonePhoneNumberBindResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postPhonePhoneNumberBindResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type postPhonePhoneNumberBindResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type postPhonePhoneNumberBindResponse409 = {
  data: HandlersErrorResponse
  status: 409
}

export type postPhonePhoneNumberBindResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type postPhonePhoneNumberBindResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type postPhonePhoneNumberBindResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type postPhonePhoneNumberBindResponseComposite = postPhonePhoneNumberBindResponse200 | postPhonePhoneNumberBindResponse400 | postPhonePhoneNumberBindResponse401 | postPhonePhoneNumberBindResponse403 | postPhonePhoneNumberBindResponse409 | postPhonePhoneNumberBindResponse422 | postPhonePhoneNumberBindResponse429 | postPhonePhoneNumberBindResponse500;
    
export type postPhonePhoneNumberBindResponse = postPhonePhoneNumberBindResponseComposite & {
  headers: Headers;
}

export const getPostPhonePhoneNumberBindUrl = (phoneNumber: string,) => {


  

  return `/phone/${phoneNumber}/bind`
}

export const postPhonePhoneNumberBind = async (phoneNumber: string,
    modelsBindRequest: ModelsBindRequest, options?: RequestInit): Promise<postPhonePhoneNumberBindResponse> => {
  
  return customFetch<postPhonePhoneNumberBindResponse>(getPostPhonePhoneNumberBindUrl(phoneNumber),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsBindRequest,)
  }
);}


/**
 * Obt√©m informa√ß√µes do cidad√£o associado a um n√∫mero de telefone
 * @summary Obter cidad√£o por telefone
 */
export type getPhonePhoneNumberCitizenResponse200 = {
  data: ModelsPhoneCitizenResponse
  status: 200
}

export type getPhonePhoneNumberCitizenResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getPhonePhoneNumberCitizenResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type getPhonePhoneNumberCitizenResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type getPhonePhoneNumberCitizenResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type getPhonePhoneNumberCitizenResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getPhonePhoneNumberCitizenResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type getPhonePhoneNumberCitizenResponseComposite = getPhonePhoneNumberCitizenResponse200 | getPhonePhoneNumberCitizenResponse400 | getPhonePhoneNumberCitizenResponse401 | getPhonePhoneNumberCitizenResponse403 | getPhonePhoneNumberCitizenResponse404 | getPhonePhoneNumberCitizenResponse429 | getPhonePhoneNumberCitizenResponse500;
    
export type getPhonePhoneNumberCitizenResponse = getPhonePhoneNumberCitizenResponseComposite & {
  headers: Headers;
}

export const getGetPhonePhoneNumberCitizenUrl = (phoneNumber: string,) => {


  

  return `/phone/${phoneNumber}/citizen`
}

export const getPhonePhoneNumberCitizen = async (phoneNumber: string, options?: RequestInit): Promise<getPhonePhoneNumberCitizenResponse> => {
  
  return customFetch<getPhonePhoneNumberCitizenResponse>(getGetPhonePhoneNumberCitizenUrl(phoneNumber),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Realiza opt-in para receber notifica√ß√µes do chatbot
 * @summary Realizar opt-in
 */
export type postPhonePhoneNumberOptInResponse200 = {
  data: ModelsOptInResponse
  status: 200
}

export type postPhonePhoneNumberOptInResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postPhonePhoneNumberOptInResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type postPhonePhoneNumberOptInResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type postPhonePhoneNumberOptInResponse409 = {
  data: HandlersErrorResponse
  status: 409
}

export type postPhonePhoneNumberOptInResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type postPhonePhoneNumberOptInResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type postPhonePhoneNumberOptInResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type postPhonePhoneNumberOptInResponseComposite = postPhonePhoneNumberOptInResponse200 | postPhonePhoneNumberOptInResponse400 | postPhonePhoneNumberOptInResponse401 | postPhonePhoneNumberOptInResponse403 | postPhonePhoneNumberOptInResponse409 | postPhonePhoneNumberOptInResponse422 | postPhonePhoneNumberOptInResponse429 | postPhonePhoneNumberOptInResponse500;
    
export type postPhonePhoneNumberOptInResponse = postPhonePhoneNumberOptInResponseComposite & {
  headers: Headers;
}

export const getPostPhonePhoneNumberOptInUrl = (phoneNumber: string,) => {


  

  return `/phone/${phoneNumber}/opt-in`
}

export const postPhonePhoneNumberOptIn = async (phoneNumber: string,
    modelsOptInRequest: ModelsOptInRequest, options?: RequestInit): Promise<postPhonePhoneNumberOptInResponse> => {
  
  return customFetch<postPhonePhoneNumberOptInResponse>(getPostPhonePhoneNumberOptInUrl(phoneNumber),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsOptInRequest,)
  }
);}


/**
 * Realiza opt-out para parar de receber notifica√ß√µes do chatbot
 * @summary Realizar opt-out
 */
export type postPhonePhoneNumberOptOutResponse200 = {
  data: ModelsOptOutResponse
  status: 200
}

export type postPhonePhoneNumberOptOutResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postPhonePhoneNumberOptOutResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type postPhonePhoneNumberOptOutResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type postPhonePhoneNumberOptOutResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type postPhonePhoneNumberOptOutResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type postPhonePhoneNumberOptOutResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type postPhonePhoneNumberOptOutResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type postPhonePhoneNumberOptOutResponseComposite = postPhonePhoneNumberOptOutResponse200 | postPhonePhoneNumberOptOutResponse400 | postPhonePhoneNumberOptOutResponse401 | postPhonePhoneNumberOptOutResponse403 | postPhonePhoneNumberOptOutResponse404 | postPhonePhoneNumberOptOutResponse422 | postPhonePhoneNumberOptOutResponse429 | postPhonePhoneNumberOptOutResponse500;
    
export type postPhonePhoneNumberOptOutResponse = postPhonePhoneNumberOptOutResponseComposite & {
  headers: Headers;
}

export const getPostPhonePhoneNumberOptOutUrl = (phoneNumber: string,) => {


  

  return `/phone/${phoneNumber}/opt-out`
}

export const postPhonePhoneNumberOptOut = async (phoneNumber: string,
    modelsOptOutRequest: ModelsOptOutRequest, options?: RequestInit): Promise<postPhonePhoneNumberOptOutResponse> => {
  
  return customFetch<postPhonePhoneNumberOptOutResponse>(getPostPhonePhoneNumberOptOutUrl(phoneNumber),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsOptOutRequest,)
  }
);}


/**
 * Coloca um n√∫mero de telefone em quarentena (apenas administradores)
 * @summary Colocar telefone em quarentena
 */
export type postPhonePhoneNumberQuarantineResponse200 = {
  data: ModelsQuarantineResponse
  status: 200
}

export type postPhonePhoneNumberQuarantineResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postPhonePhoneNumberQuarantineResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type postPhonePhoneNumberQuarantineResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type postPhonePhoneNumberQuarantineResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type postPhonePhoneNumberQuarantineResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type postPhonePhoneNumberQuarantineResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type postPhonePhoneNumberQuarantineResponseComposite = postPhonePhoneNumberQuarantineResponse200 | postPhonePhoneNumberQuarantineResponse400 | postPhonePhoneNumberQuarantineResponse401 | postPhonePhoneNumberQuarantineResponse403 | postPhonePhoneNumberQuarantineResponse422 | postPhonePhoneNumberQuarantineResponse429 | postPhonePhoneNumberQuarantineResponse500;
    
export type postPhonePhoneNumberQuarantineResponse = postPhonePhoneNumberQuarantineResponseComposite & {
  headers: Headers;
}

export const getPostPhonePhoneNumberQuarantineUrl = (phoneNumber: string,) => {


  

  return `/phone/${phoneNumber}/quarantine`
}

export const postPhonePhoneNumberQuarantine = async (phoneNumber: string, options?: RequestInit): Promise<postPhonePhoneNumberQuarantineResponse> => {
  
  return customFetch<postPhonePhoneNumberQuarantineResponse>(getPostPhonePhoneNumberQuarantineUrl(phoneNumber),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


/**
 * Libera um n√∫mero de telefone da quarentena (apenas administradores)
 * @summary Liberar telefone da quarentena
 */
export type deletePhonePhoneNumberQuarantineResponse200 = {
  data: ModelsQuarantineResponse
  status: 200
}

export type deletePhonePhoneNumberQuarantineResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type deletePhonePhoneNumberQuarantineResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type deletePhonePhoneNumberQuarantineResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type deletePhonePhoneNumberQuarantineResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type deletePhonePhoneNumberQuarantineResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type deletePhonePhoneNumberQuarantineResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type deletePhonePhoneNumberQuarantineResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type deletePhonePhoneNumberQuarantineResponseComposite = deletePhonePhoneNumberQuarantineResponse200 | deletePhonePhoneNumberQuarantineResponse400 | deletePhonePhoneNumberQuarantineResponse401 | deletePhonePhoneNumberQuarantineResponse403 | deletePhonePhoneNumberQuarantineResponse404 | deletePhonePhoneNumberQuarantineResponse422 | deletePhonePhoneNumberQuarantineResponse429 | deletePhonePhoneNumberQuarantineResponse500;
    
export type deletePhonePhoneNumberQuarantineResponse = deletePhonePhoneNumberQuarantineResponseComposite & {
  headers: Headers;
}

export const getDeletePhonePhoneNumberQuarantineUrl = (phoneNumber: string,) => {


  

  return `/phone/${phoneNumber}/quarantine`
}

export const deletePhonePhoneNumberQuarantine = async (phoneNumber: string, options?: RequestInit): Promise<deletePhonePhoneNumberQuarantineResponse> => {
  
  return customFetch<deletePhonePhoneNumberQuarantineResponse>(getDeletePhonePhoneNumberQuarantineUrl(phoneNumber),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


/**
 * Rejeita um registro e bloqueia o mapeamento telefone-CPF
 * @summary Rejeitar registro
 */
export type postPhonePhoneNumberRejectRegistrationResponse200 = {
  data: ModelsRejectRegistrationResponse
  status: 200
}

export type postPhonePhoneNumberRejectRegistrationResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postPhonePhoneNumberRejectRegistrationResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type postPhonePhoneNumberRejectRegistrationResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type postPhonePhoneNumberRejectRegistrationResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type postPhonePhoneNumberRejectRegistrationResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type postPhonePhoneNumberRejectRegistrationResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type postPhonePhoneNumberRejectRegistrationResponseComposite = postPhonePhoneNumberRejectRegistrationResponse200 | postPhonePhoneNumberRejectRegistrationResponse400 | postPhonePhoneNumberRejectRegistrationResponse401 | postPhonePhoneNumberRejectRegistrationResponse403 | postPhonePhoneNumberRejectRegistrationResponse422 | postPhonePhoneNumberRejectRegistrationResponse429 | postPhonePhoneNumberRejectRegistrationResponse500;
    
export type postPhonePhoneNumberRejectRegistrationResponse = postPhonePhoneNumberRejectRegistrationResponseComposite & {
  headers: Headers;
}

export const getPostPhonePhoneNumberRejectRegistrationUrl = (phoneNumber: string,) => {


  

  return `/phone/${phoneNumber}/reject-registration`
}

export const postPhonePhoneNumberRejectRegistration = async (phoneNumber: string,
    modelsRejectRegistrationRequest: ModelsRejectRegistrationRequest, options?: RequestInit): Promise<postPhonePhoneNumberRejectRegistrationResponse> => {
  
  return customFetch<postPhonePhoneNumberRejectRegistrationResponse>(getPostPhonePhoneNumberRejectRegistrationUrl(phoneNumber),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsRejectRegistrationRequest,)
  }
);}


/**
 * Obt√©m o status de um n√∫mero de telefone (quarentena, CPF vinculado, opt-in/opt-out, etc.)
 * @summary Obter status do telefone
 */
export type getPhonePhoneNumberStatusResponse200 = {
  data: ModelsPhoneStatusResponse
  status: 200
}

export type getPhonePhoneNumberStatusResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getPhonePhoneNumberStatusResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type getPhonePhoneNumberStatusResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getPhonePhoneNumberStatusResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type getPhonePhoneNumberStatusResponseComposite = getPhonePhoneNumberStatusResponse200 | getPhonePhoneNumberStatusResponse400 | getPhonePhoneNumberStatusResponse404 | getPhonePhoneNumberStatusResponse429 | getPhonePhoneNumberStatusResponse500;
    
export type getPhonePhoneNumberStatusResponse = getPhonePhoneNumberStatusResponseComposite & {
  headers: Headers;
}

export const getGetPhonePhoneNumberStatusUrl = (phoneNumber: string,) => {


  

  return `/phone/${phoneNumber}/status`
}

export const getPhonePhoneNumberStatus = async (phoneNumber: string, options?: RequestInit): Promise<getPhonePhoneNumberStatusResponse> => {
  
  return customFetch<getPhonePhoneNumberStatusResponse>(getGetPhonePhoneNumberStatusUrl(phoneNumber),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Valida um registro de usu√°rio contra dados base do governo
 * @summary Validar registro
 */
export type postPhonePhoneNumberValidateRegistrationResponse200 = {
  data: ModelsValidateRegistrationResponse
  status: 200
}

export type postPhonePhoneNumberValidateRegistrationResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postPhonePhoneNumberValidateRegistrationResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type postPhonePhoneNumberValidateRegistrationResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type postPhonePhoneNumberValidateRegistrationResponse422 = {
  data: HandlersErrorResponse
  status: 422
}

export type postPhonePhoneNumberValidateRegistrationResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type postPhonePhoneNumberValidateRegistrationResponse500 = {
  data: HandlersErrorResponse
  status: 500
}
    
export type postPhonePhoneNumberValidateRegistrationResponseComposite = postPhonePhoneNumberValidateRegistrationResponse200 | postPhonePhoneNumberValidateRegistrationResponse400 | postPhonePhoneNumberValidateRegistrationResponse401 | postPhonePhoneNumberValidateRegistrationResponse403 | postPhonePhoneNumberValidateRegistrationResponse422 | postPhonePhoneNumberValidateRegistrationResponse429 | postPhonePhoneNumberValidateRegistrationResponse500;
    
export type postPhonePhoneNumberValidateRegistrationResponse = postPhonePhoneNumberValidateRegistrationResponseComposite & {
  headers: Headers;
}

export const getPostPhonePhoneNumberValidateRegistrationUrl = (phoneNumber: string,) => {


  

  return `/phone/${phoneNumber}/validate-registration`
}

export const postPhonePhoneNumberValidateRegistration = async (phoneNumber: string,
    modelsValidateRegistrationRequest: ModelsValidateRegistrationRequest, options?: RequestInit): Promise<postPhonePhoneNumberValidateRegistrationResponse> => {
  
  return customFetch<postPhonePhoneNumberValidateRegistrationResponse>(getPostPhonePhoneNumberValidateRegistrationUrl(phoneNumber),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsValidateRegistrationRequest,)
  }
);}


