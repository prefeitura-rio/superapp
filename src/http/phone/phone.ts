/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * API RMI
 * API para gerenciamento de dados de cidadãos do Rio de Janeiro, incluindo autodeclaração de informações e verificação de contato.
 * OpenAPI spec version: 1.0
 */
import type {
  GetAdminPhoneQuarantinedParams,
  HandlersErrorResponse,
  ModelsBindRequest,
  ModelsBindResponse,
  ModelsOptInRequest,
  ModelsOptInResponse,
  ModelsOptOutRequest,
  ModelsOptOutResponse,
  ModelsPhoneCitizenResponse,
  ModelsPhoneStatusResponse,
  ModelsQuarantineResponse,
  ModelsQuarantineStats,
  ModelsQuarantinedListResponse,
  ModelsRejectRegistrationRequest,
  ModelsRejectRegistrationResponse,
  ModelsValidateRegistrationRequest,
  ModelsValidateRegistrationResponse,
} from '.././models'

import { customFetch } from '../../../custom-fetch'

/**
 * Obtém estatísticas sobre telefones em quarentena (apenas administradores)
 * @summary Obter estatísticas de quarentena
 */
export type getAdminPhoneQuarantineStatsResponse200 = {
  data: ModelsQuarantineStats
  status: 200
}

export type getAdminPhoneQuarantineStatsResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type getAdminPhoneQuarantineStatsResponseComposite =
  | getAdminPhoneQuarantineStatsResponse200
  | getAdminPhoneQuarantineStatsResponse401

export type getAdminPhoneQuarantineStatsResponse =
  getAdminPhoneQuarantineStatsResponseComposite & {
    headers: Headers
  }

export const getGetAdminPhoneQuarantineStatsUrl = () => {
  return `/admin/phone/quarantine/stats`
}

export const getAdminPhoneQuarantineStats = async (
  options?: RequestInit
): Promise<getAdminPhoneQuarantineStatsResponse> => {
  return customFetch<getAdminPhoneQuarantineStatsResponse>(
    getGetAdminPhoneQuarantineStatsUrl(),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Lista todos os telefones em quarentena com paginação (apenas administradores)
 * @summary Listar telefones em quarentena
 */
export type getAdminPhoneQuarantinedResponse200 = {
  data: ModelsQuarantinedListResponse
  status: 200
}

export type getAdminPhoneQuarantinedResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getAdminPhoneQuarantinedResponseComposite =
  | getAdminPhoneQuarantinedResponse200
  | getAdminPhoneQuarantinedResponse400

export type getAdminPhoneQuarantinedResponse =
  getAdminPhoneQuarantinedResponseComposite & {
    headers: Headers
  }

export const getGetAdminPhoneQuarantinedUrl = (
  params?: GetAdminPhoneQuarantinedParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/admin/phone/quarantined?${stringifiedParams}`
    : `/admin/phone/quarantined`
}

export const getAdminPhoneQuarantined = async (
  params?: GetAdminPhoneQuarantinedParams,
  options?: RequestInit
): Promise<getAdminPhoneQuarantinedResponse> => {
  return customFetch<getAdminPhoneQuarantinedResponse>(
    getGetAdminPhoneQuarantinedUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Vincula um número de telefone a um CPF sem definir opt-in
 * @summary Vincular telefone a CPF
 */
export type postPhonePhoneNumberBindResponse200 = {
  data: ModelsBindResponse
  status: 200
}

export type postPhonePhoneNumberBindResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postPhonePhoneNumberBindResponseComposite =
  | postPhonePhoneNumberBindResponse200
  | postPhonePhoneNumberBindResponse400

export type postPhonePhoneNumberBindResponse =
  postPhonePhoneNumberBindResponseComposite & {
    headers: Headers
  }

export const getPostPhonePhoneNumberBindUrl = (phoneNumber: string) => {
  return `/phone/${phoneNumber}/bind`
}

export const postPhonePhoneNumberBind = async (
  phoneNumber: string,
  modelsBindRequest: ModelsBindRequest,
  options?: RequestInit
): Promise<postPhonePhoneNumberBindResponse> => {
  return customFetch<postPhonePhoneNumberBindResponse>(
    getPostPhonePhoneNumberBindUrl(phoneNumber),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsBindRequest),
    }
  )
}

/**
 * Obtém informações do cidadão associado a um número de telefone
 * @summary Obter cidadão por telefone
 */
export type getPhonePhoneNumberCitizenResponse200 = {
  data: ModelsPhoneCitizenResponse
  status: 200
}

export type getPhonePhoneNumberCitizenResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getPhonePhoneNumberCitizenResponseComposite =
  | getPhonePhoneNumberCitizenResponse200
  | getPhonePhoneNumberCitizenResponse400

export type getPhonePhoneNumberCitizenResponse =
  getPhonePhoneNumberCitizenResponseComposite & {
    headers: Headers
  }

export const getGetPhonePhoneNumberCitizenUrl = (phoneNumber: string) => {
  return `/phone/${phoneNumber}/citizen`
}

export const getPhonePhoneNumberCitizen = async (
  phoneNumber: string,
  options?: RequestInit
): Promise<getPhonePhoneNumberCitizenResponse> => {
  return customFetch<getPhonePhoneNumberCitizenResponse>(
    getGetPhonePhoneNumberCitizenUrl(phoneNumber),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Realiza opt-in para receber notificações
 * @summary Realizar opt-in
 */
export type postPhonePhoneNumberOptInResponse200 = {
  data: ModelsOptInResponse
  status: 200
}

export type postPhonePhoneNumberOptInResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postPhonePhoneNumberOptInResponseComposite =
  | postPhonePhoneNumberOptInResponse200
  | postPhonePhoneNumberOptInResponse400

export type postPhonePhoneNumberOptInResponse =
  postPhonePhoneNumberOptInResponseComposite & {
    headers: Headers
  }

export const getPostPhonePhoneNumberOptInUrl = (phoneNumber: string) => {
  return `/phone/${phoneNumber}/opt-in`
}

export const postPhonePhoneNumberOptIn = async (
  phoneNumber: string,
  modelsOptInRequest: ModelsOptInRequest,
  options?: RequestInit
): Promise<postPhonePhoneNumberOptInResponse> => {
  return customFetch<postPhonePhoneNumberOptInResponse>(
    getPostPhonePhoneNumberOptInUrl(phoneNumber),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsOptInRequest),
    }
  )
}

/**
 * Realiza opt-out para parar de receber notificações
 * @summary Realizar opt-out
 */
export type postPhonePhoneNumberOptOutResponse200 = {
  data: ModelsOptOutResponse
  status: 200
}

export type postPhonePhoneNumberOptOutResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postPhonePhoneNumberOptOutResponseComposite =
  | postPhonePhoneNumberOptOutResponse200
  | postPhonePhoneNumberOptOutResponse400

export type postPhonePhoneNumberOptOutResponse =
  postPhonePhoneNumberOptOutResponseComposite & {
    headers: Headers
  }

export const getPostPhonePhoneNumberOptOutUrl = (phoneNumber: string) => {
  return `/phone/${phoneNumber}/opt-out`
}

export const postPhonePhoneNumberOptOut = async (
  phoneNumber: string,
  modelsOptOutRequest: ModelsOptOutRequest,
  options?: RequestInit
): Promise<postPhonePhoneNumberOptOutResponse> => {
  return customFetch<postPhonePhoneNumberOptOutResponse>(
    getPostPhonePhoneNumberOptOutUrl(phoneNumber),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsOptOutRequest),
    }
  )
}

/**
 * Coloca um número de telefone em quarentena (apenas administradores)
 * @summary Colocar telefone em quarentena
 */
export type postPhonePhoneNumberQuarantineResponse200 = {
  data: ModelsQuarantineResponse
  status: 200
}

export type postPhonePhoneNumberQuarantineResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postPhonePhoneNumberQuarantineResponseComposite =
  | postPhonePhoneNumberQuarantineResponse200
  | postPhonePhoneNumberQuarantineResponse400

export type postPhonePhoneNumberQuarantineResponse =
  postPhonePhoneNumberQuarantineResponseComposite & {
    headers: Headers
  }

export const getPostPhonePhoneNumberQuarantineUrl = (phoneNumber: string) => {
  return `/phone/${phoneNumber}/quarantine`
}

export const postPhonePhoneNumberQuarantine = async (
  phoneNumber: string,
  options?: RequestInit
): Promise<postPhonePhoneNumberQuarantineResponse> => {
  return customFetch<postPhonePhoneNumberQuarantineResponse>(
    getPostPhonePhoneNumberQuarantineUrl(phoneNumber),
    {
      ...options,
      method: 'POST',
    }
  )
}

/**
 * Libera um número de telefone da quarentena (apenas administradores)
 * @summary Liberar telefone da quarentena
 */
export type deletePhonePhoneNumberQuarantineResponse200 = {
  data: ModelsQuarantineResponse
  status: 200
}

export type deletePhonePhoneNumberQuarantineResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type deletePhonePhoneNumberQuarantineResponseComposite =
  | deletePhonePhoneNumberQuarantineResponse200
  | deletePhonePhoneNumberQuarantineResponse400

export type deletePhonePhoneNumberQuarantineResponse =
  deletePhonePhoneNumberQuarantineResponseComposite & {
    headers: Headers
  }

export const getDeletePhonePhoneNumberQuarantineUrl = (phoneNumber: string) => {
  return `/phone/${phoneNumber}/quarantine`
}

export const deletePhonePhoneNumberQuarantine = async (
  phoneNumber: string,
  options?: RequestInit
): Promise<deletePhonePhoneNumberQuarantineResponse> => {
  return customFetch<deletePhonePhoneNumberQuarantineResponse>(
    getDeletePhonePhoneNumberQuarantineUrl(phoneNumber),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

/**
 * Rejeita um registro e bloqueia o mapeamento telefone-CPF
 * @summary Rejeitar registro
 */
export type postPhonePhoneNumberRejectRegistrationResponse200 = {
  data: ModelsRejectRegistrationResponse
  status: 200
}

export type postPhonePhoneNumberRejectRegistrationResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postPhonePhoneNumberRejectRegistrationResponseComposite =
  | postPhonePhoneNumberRejectRegistrationResponse200
  | postPhonePhoneNumberRejectRegistrationResponse400

export type postPhonePhoneNumberRejectRegistrationResponse =
  postPhonePhoneNumberRejectRegistrationResponseComposite & {
    headers: Headers
  }

export const getPostPhonePhoneNumberRejectRegistrationUrl = (
  phoneNumber: string
) => {
  return `/phone/${phoneNumber}/reject-registration`
}

export const postPhonePhoneNumberRejectRegistration = async (
  phoneNumber: string,
  modelsRejectRegistrationRequest: ModelsRejectRegistrationRequest,
  options?: RequestInit
): Promise<postPhonePhoneNumberRejectRegistrationResponse> => {
  return customFetch<postPhonePhoneNumberRejectRegistrationResponse>(
    getPostPhonePhoneNumberRejectRegistrationUrl(phoneNumber),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsRejectRegistrationRequest),
    }
  )
}

/**
 * Obtém o status de um número de telefone (quarentena, CPF vinculado, etc.)
 * @summary Obter status do telefone
 */
export type getPhonePhoneNumberStatusResponse200 = {
  data: ModelsPhoneStatusResponse
  status: 200
}

export type getPhonePhoneNumberStatusResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getPhonePhoneNumberStatusResponseComposite =
  | getPhonePhoneNumberStatusResponse200
  | getPhonePhoneNumberStatusResponse400

export type getPhonePhoneNumberStatusResponse =
  getPhonePhoneNumberStatusResponseComposite & {
    headers: Headers
  }

export const getGetPhonePhoneNumberStatusUrl = (phoneNumber: string) => {
  return `/phone/${phoneNumber}/status`
}

export const getPhonePhoneNumberStatus = async (
  phoneNumber: string,
  options?: RequestInit
): Promise<getPhonePhoneNumberStatusResponse> => {
  return customFetch<getPhonePhoneNumberStatusResponse>(
    getGetPhonePhoneNumberStatusUrl(phoneNumber),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Valida um registro de usuário contra dados base
 * @summary Validar registro
 */
export type postPhonePhoneNumberValidateRegistrationResponse200 = {
  data: ModelsValidateRegistrationResponse
  status: 200
}

export type postPhonePhoneNumberValidateRegistrationResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postPhonePhoneNumberValidateRegistrationResponseComposite =
  | postPhonePhoneNumberValidateRegistrationResponse200
  | postPhonePhoneNumberValidateRegistrationResponse400

export type postPhonePhoneNumberValidateRegistrationResponse =
  postPhonePhoneNumberValidateRegistrationResponseComposite & {
    headers: Headers
  }

export const getPostPhonePhoneNumberValidateRegistrationUrl = (
  phoneNumber: string
) => {
  return `/phone/${phoneNumber}/validate-registration`
}

export const postPhonePhoneNumberValidateRegistration = async (
  phoneNumber: string,
  modelsValidateRegistrationRequest: ModelsValidateRegistrationRequest,
  options?: RequestInit
): Promise<postPhonePhoneNumberValidateRegistrationResponse> => {
  return customFetch<postPhonePhoneNumberValidateRegistrationResponse>(
    getPostPhonePhoneNumberValidateRegistrationUrl(phoneNumber),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsValidateRegistrationRequest),
    }
  )
}
