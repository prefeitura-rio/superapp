/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * API RMI
 * API para gerenciamento de dados de cidadãos do Rio de Janeiro, incluindo autodeclaração de informações e verificação de contato.
 * OpenAPI spec version: 1.0
 */
import type {
  GetAdminBetaGroupsParams,
  HandlersErrorResponse,
  ModelsBetaGroupListResponse,
  ModelsBetaGroupRequestBody,
  ModelsBetaGroupResponse,
} from '.././models'

import { customFetch } from '../../../custom-fetch'

/**
 * Lista todos os grupos beta com paginação (apenas administradores)
 * @summary Listar grupos beta
 */
export type getAdminBetaGroupsResponse200 = {
  data: ModelsBetaGroupListResponse
  status: 200
}

export type getAdminBetaGroupsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getAdminBetaGroupsResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type getAdminBetaGroupsResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type getAdminBetaGroupsResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getAdminBetaGroupsResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type getAdminBetaGroupsResponseComposite =
  | getAdminBetaGroupsResponse200
  | getAdminBetaGroupsResponse400
  | getAdminBetaGroupsResponse401
  | getAdminBetaGroupsResponse403
  | getAdminBetaGroupsResponse429
  | getAdminBetaGroupsResponse500

export type getAdminBetaGroupsResponse = getAdminBetaGroupsResponseComposite & {
  headers: Headers
}

export const getGetAdminBetaGroupsUrl = (params?: GetAdminBetaGroupsParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/admin/beta/groups?${stringifiedParams}`
    : `/admin/beta/groups`
}

export const getAdminBetaGroups = async (
  params?: GetAdminBetaGroupsParams,
  options?: RequestInit
): Promise<getAdminBetaGroupsResponse> => {
  return customFetch<getAdminBetaGroupsResponse>(
    getGetAdminBetaGroupsUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Cria um novo grupo beta para o chatbot (apenas administradores)
 * @summary Criar grupo beta
 */
export type postAdminBetaGroupsResponse201 = {
  data: ModelsBetaGroupResponse
  status: 201
}

export type postAdminBetaGroupsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type postAdminBetaGroupsResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type postAdminBetaGroupsResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type postAdminBetaGroupsResponse409 = {
  data: HandlersErrorResponse
  status: 409
}

export type postAdminBetaGroupsResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type postAdminBetaGroupsResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type postAdminBetaGroupsResponseComposite =
  | postAdminBetaGroupsResponse201
  | postAdminBetaGroupsResponse400
  | postAdminBetaGroupsResponse401
  | postAdminBetaGroupsResponse403
  | postAdminBetaGroupsResponse409
  | postAdminBetaGroupsResponse429
  | postAdminBetaGroupsResponse500

export type postAdminBetaGroupsResponse =
  postAdminBetaGroupsResponseComposite & {
    headers: Headers
  }

export const getPostAdminBetaGroupsUrl = () => {
  return `/admin/beta/groups`
}

export const postAdminBetaGroups = async (
  modelsBetaGroupRequestBody: ModelsBetaGroupRequestBody,
  options?: RequestInit
): Promise<postAdminBetaGroupsResponse> => {
  return customFetch<postAdminBetaGroupsResponse>(getPostAdminBetaGroupsUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(modelsBetaGroupRequestBody),
  })
}

/**
 * Obtém um grupo beta por ID (apenas administradores)
 * @summary Obter grupo beta
 */
export type getAdminBetaGroupsGroupIdResponse200 = {
  data: ModelsBetaGroupResponse
  status: 200
}

export type getAdminBetaGroupsGroupIdResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type getAdminBetaGroupsGroupIdResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type getAdminBetaGroupsGroupIdResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type getAdminBetaGroupsGroupIdResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type getAdminBetaGroupsGroupIdResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type getAdminBetaGroupsGroupIdResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type getAdminBetaGroupsGroupIdResponseComposite =
  | getAdminBetaGroupsGroupIdResponse200
  | getAdminBetaGroupsGroupIdResponse400
  | getAdminBetaGroupsGroupIdResponse401
  | getAdminBetaGroupsGroupIdResponse403
  | getAdminBetaGroupsGroupIdResponse404
  | getAdminBetaGroupsGroupIdResponse429
  | getAdminBetaGroupsGroupIdResponse500

export type getAdminBetaGroupsGroupIdResponse =
  getAdminBetaGroupsGroupIdResponseComposite & {
    headers: Headers
  }

export const getGetAdminBetaGroupsGroupIdUrl = (groupId: string) => {
  return `/admin/beta/groups/${groupId}`
}

export const getAdminBetaGroupsGroupId = async (
  groupId: string,
  options?: RequestInit
): Promise<getAdminBetaGroupsGroupIdResponse> => {
  return customFetch<getAdminBetaGroupsGroupIdResponse>(
    getGetAdminBetaGroupsGroupIdUrl(groupId),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Atualiza um grupo beta existente (apenas administradores)
 * @summary Atualizar grupo beta
 */
export type putAdminBetaGroupsGroupIdResponse200 = {
  data: ModelsBetaGroupResponse
  status: 200
}

export type putAdminBetaGroupsGroupIdResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type putAdminBetaGroupsGroupIdResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type putAdminBetaGroupsGroupIdResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type putAdminBetaGroupsGroupIdResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type putAdminBetaGroupsGroupIdResponse409 = {
  data: HandlersErrorResponse
  status: 409
}

export type putAdminBetaGroupsGroupIdResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type putAdminBetaGroupsGroupIdResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type putAdminBetaGroupsGroupIdResponseComposite =
  | putAdminBetaGroupsGroupIdResponse200
  | putAdminBetaGroupsGroupIdResponse400
  | putAdminBetaGroupsGroupIdResponse401
  | putAdminBetaGroupsGroupIdResponse403
  | putAdminBetaGroupsGroupIdResponse404
  | putAdminBetaGroupsGroupIdResponse409
  | putAdminBetaGroupsGroupIdResponse429
  | putAdminBetaGroupsGroupIdResponse500

export type putAdminBetaGroupsGroupIdResponse =
  putAdminBetaGroupsGroupIdResponseComposite & {
    headers: Headers
  }

export const getPutAdminBetaGroupsGroupIdUrl = (groupId: string) => {
  return `/admin/beta/groups/${groupId}`
}

export const putAdminBetaGroupsGroupId = async (
  groupId: string,
  modelsBetaGroupRequestBody: ModelsBetaGroupRequestBody,
  options?: RequestInit
): Promise<putAdminBetaGroupsGroupIdResponse> => {
  return customFetch<putAdminBetaGroupsGroupIdResponse>(
    getPutAdminBetaGroupsGroupIdUrl(groupId),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsBetaGroupRequestBody),
    }
  )
}

/**
 * Exclui um grupo beta e remove todas as associações de telefones (apenas administradores)
 * @summary Excluir grupo beta
 */
export type deleteAdminBetaGroupsGroupIdResponse204 = {
  data: null
  status: 204
}

export type deleteAdminBetaGroupsGroupIdResponse400 = {
  data: HandlersErrorResponse
  status: 400
}

export type deleteAdminBetaGroupsGroupIdResponse401 = {
  data: HandlersErrorResponse
  status: 401
}

export type deleteAdminBetaGroupsGroupIdResponse403 = {
  data: HandlersErrorResponse
  status: 403
}

export type deleteAdminBetaGroupsGroupIdResponse404 = {
  data: HandlersErrorResponse
  status: 404
}

export type deleteAdminBetaGroupsGroupIdResponse429 = {
  data: HandlersErrorResponse
  status: 429
}

export type deleteAdminBetaGroupsGroupIdResponse500 = {
  data: HandlersErrorResponse
  status: 500
}

export type deleteAdminBetaGroupsGroupIdResponseComposite =
  | deleteAdminBetaGroupsGroupIdResponse204
  | deleteAdminBetaGroupsGroupIdResponse400
  | deleteAdminBetaGroupsGroupIdResponse401
  | deleteAdminBetaGroupsGroupIdResponse403
  | deleteAdminBetaGroupsGroupIdResponse404
  | deleteAdminBetaGroupsGroupIdResponse429
  | deleteAdminBetaGroupsGroupIdResponse500

export type deleteAdminBetaGroupsGroupIdResponse =
  deleteAdminBetaGroupsGroupIdResponseComposite & {
    headers: Headers
  }

export const getDeleteAdminBetaGroupsGroupIdUrl = (groupId: string) => {
  return `/admin/beta/groups/${groupId}`
}

export const deleteAdminBetaGroupsGroupId = async (
  groupId: string,
  options?: RequestInit
): Promise<deleteAdminBetaGroupsGroupIdResponse> => {
  return customFetch<deleteAdminBetaGroupsGroupIdResponse>(
    getDeleteAdminBetaGroupsGroupIdUrl(groupId),
    {
      ...options,
      method: 'DELETE',
    }
  )
}
